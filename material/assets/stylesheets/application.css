@charset "UTF-8";
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

*,
*::before,
*::after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit; }

html {
  -webkit-text-size-adjust: none;
     -moz-text-size-adjust: none;
      -ms-text-size-adjust: none;
          text-size-adjust: none; }

body {
  margin: 0; }

hr {
  overflow: visible;
  -webkit-box-sizing: content-box;
          box-sizing: content-box; }

a {
  -webkit-text-decoration-skip: objects; }

a,
button,
label,
input {
  -webkit-tap-highlight-color: transparent; }

a {
  color: inherit;
  text-decoration: none; }

small {
  font-size: 80%; }

sub,
sup {
  position: relative;
  font-size: 80%;
  line-height: 0;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

img {
  border-style: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  font-weight: normal;
  vertical-align: top; }

button {
  padding: 0;
  border: 0;
  outline-style: none;
  background: transparent;
  font-size: inherit; }

input {
  border: 0;
  outline: 0; }

.md-icon, .md-clipboard::before, .md-nav__title::before, .md-nav__button, .md-nav__link::after, .md-search-result__article--document::before, .md-source-file::before, .md-typeset .admonition > .admonition-title::before, .md-typeset details > .admonition-title::before, .md-typeset .admonition > summary::before, .md-typeset details > summary::before, .md-typeset .footnote-backref, .md-typeset .critic.comment::before, .md-typeset summary::after, .md-typeset .task-list-control .task-list-indicator::before {
  font-family: "Material Icons";
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
  text-transform: none;
  white-space: nowrap;
  speak: none;
  word-wrap: normal;
  direction: ltr; }
  .md-content__icon, .md-header-nav__button, .md-footer-nav__button, .md-nav__title::before, .md-nav__button, .md-search-result__article--document::before {
    display: inline-block;
    margin: 0.4rem;
    padding: 0.8rem;
    font-size: 2.4rem;
    cursor: pointer; }

.md-icon--arrow-back::before {
  content: "\E5C4"; }

.md-icon--arrow-forward::before {
  content: "\E5C8"; }

.md-icon--menu::before {
  content: "\E5D2"; }

.md-icon--search::before {
  content: "\E8B6"; }

[dir="rtl"] .md-icon--arrow-back::before {
  content: "\E5C8"; }

[dir="rtl"] .md-icon--arrow-forward::before {
  content: "\E5C4"; }

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

body,
input {
  color: rgba(0, 0, 0, 0.87);
  -webkit-font-feature-settings: "kern", "liga";
          font-feature-settings: "kern", "liga";
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; }

pre,
code,
kbd {
  color: rgba(0, 0, 0, 0.87);
  -webkit-font-feature-settings: "kern";
          font-feature-settings: "kern";
  font-family: "Courier New", Courier, monospace; }

.md-typeset {
  font-size: 1.6rem;
  line-height: 1.6;
  -webkit-print-color-adjust: exact; }
  .md-typeset p,
  .md-typeset ul,
  .md-typeset ol,
  .md-typeset blockquote {
    margin: 1em 0; }
  .md-typeset h1 {
    margin: 0 0 4rem;
    color: rgba(0, 0, 0, 0.54);
    font-size: 3.125rem;
    font-weight: 300;
    letter-spacing: -0.01em;
    line-height: 1.3; }
  .md-typeset h2 {
    margin: 4rem 0 1.6rem;
    font-size: 2.5rem;
    font-weight: 300;
    letter-spacing: -0.01em;
    line-height: 1.4; }
  .md-typeset h3 {
    margin: 3.2rem 0 1.6rem;
    font-size: 2rem;
    font-weight: 400;
    letter-spacing: -0.01em;
    line-height: 1.5; }
  .md-typeset h2 + h3 {
    margin-top: 1.6rem; }
  .md-typeset h4 {
    margin: 1.6rem 0;
    font-size: 1.6rem;
    font-weight: 700;
    letter-spacing: -0.01em; }
  .md-typeset h5,
  .md-typeset h6 {
    margin: 1.6rem 0;
    color: rgba(0, 0, 0, 0.54);
    font-size: 1.28rem;
    font-weight: 700;
    letter-spacing: -0.01em; }
  .md-typeset h5 {
    text-transform: uppercase; }
  .md-typeset hr {
    margin: 1.5em 0;
    border-bottom: 0.1rem dotted rgba(0, 0, 0, 0.26); }
  .md-typeset a {
    color: #3f51b5;
    word-break: break-word; }
    .md-typeset a, .md-typeset a::before {
      -webkit-transition: color 0.125s;
      transition: color 0.125s; }
    .md-typeset a:hover, .md-typeset a:active {
      color: #536dfe; }
  .md-typeset code,
  .md-typeset pre {
    background-color: rgba(236, 236, 236, 0.5);
    color: #37474F;
    font-size: 85%;
    direction: ltr; }
  .md-typeset code {
    margin: 0 0.29412em;
    padding: 0.07353em 0;
    border-radius: 0.2rem;
    -webkit-box-shadow: 0.29412em 0 0 rgba(236, 236, 236, 0.5), -0.29412em 0 0 rgba(236, 236, 236, 0.5);
            box-shadow: 0.29412em 0 0 rgba(236, 236, 236, 0.5), -0.29412em 0 0 rgba(236, 236, 236, 0.5);
    word-break: break-word;
    -webkit-box-decoration-break: clone;
            box-decoration-break: clone; }
  .md-typeset h1 code,
  .md-typeset h2 code,
  .md-typeset h3 code,
  .md-typeset h4 code,
  .md-typeset h5 code,
  .md-typeset h6 code {
    margin: 0;
    background-color: transparent;
    -webkit-box-shadow: none;
            box-shadow: none; }
  .md-typeset a > code {
    margin: inherit;
    padding: inherit;
    border-radius: none;
    background-color: inherit;
    color: inherit;
    -webkit-box-shadow: none;
            box-shadow: none; }
  .md-typeset pre {
    position: relative;
    margin: 1em 0;
    border-radius: 0.2rem;
    line-height: 1.4;
    -webkit-overflow-scrolling: touch; }
    .md-typeset pre > code {
      display: block;
      margin: 0;
      padding: 1.05rem 1.2rem;
      background-color: transparent;
      font-size: inherit;
      -webkit-box-shadow: none;
              box-shadow: none;
      -webkit-box-decoration-break: none;
              box-decoration-break: none;
      overflow: auto; }
      .md-typeset pre > code::-webkit-scrollbar {
        width: 0.4rem;
        height: 0.4rem; }
      .md-typeset pre > code::-webkit-scrollbar-thumb {
        background-color: rgba(0, 0, 0, 0.26); }
        .md-typeset pre > code::-webkit-scrollbar-thumb:hover {
          background-color: #536dfe; }
  .md-typeset kbd {
    padding: 0 0.29412em;
    border: 0.1rem solid #c9c9c9;
    border-radius: 0.3rem;
    border-bottom-color: #bcbcbc;
    background-color: #FCFCFC;
    color: #555555;
    font-size: 85%;
    -webkit-box-shadow: 0 0.1rem 0 #b0b0b0;
            box-shadow: 0 0.1rem 0 #b0b0b0;
    word-break: break-word; }
  .md-typeset mark {
    margin: 0 0.25em;
    padding: 0.0625em 0;
    border-radius: 0.2rem;
    background-color: rgba(255, 235, 59, 0.5);
    -webkit-box-shadow: 0.25em 0 0 rgba(255, 235, 59, 0.5), -0.25em 0 0 rgba(255, 235, 59, 0.5);
            box-shadow: 0.25em 0 0 rgba(255, 235, 59, 0.5), -0.25em 0 0 rgba(255, 235, 59, 0.5);
    word-break: break-word;
    -webkit-box-decoration-break: clone;
            box-decoration-break: clone; }
  .md-typeset abbr {
    border-bottom: 0.1rem dotted rgba(0, 0, 0, 0.54);
    text-decoration: none;
    cursor: help; }
  .md-typeset small {
    opacity: 0.75; }
  .md-typeset sup,
  .md-typeset sub {
    margin-left: 0.07812em; }
    [dir="rtl"] .md-typeset sup, [dir="rtl"]
    .md-typeset sub {
      margin-right: 0.07812em;
      margin-left: initial; }
  .md-typeset blockquote {
    padding-left: 1.2rem;
    border-left: 0.4rem solid rgba(0, 0, 0, 0.26);
    color: rgba(0, 0, 0, 0.54); }
    [dir="rtl"] .md-typeset blockquote {
      padding-right: 1.2rem;
      padding-left: initial;
      border-right: 0.4rem solid rgba(0, 0, 0, 0.26);
      border-left: initial; }
  .md-typeset ul {
    list-style-type: disc; }
  .md-typeset ul,
  .md-typeset ol {
    margin-left: 0.625em;
    padding: 0; }
    [dir="rtl"] .md-typeset ul, [dir="rtl"]
    .md-typeset ol {
      margin-right: 0.625em;
      margin-left: initial; }
    .md-typeset ul ol,
    .md-typeset ol ol {
      list-style-type: lower-alpha; }
      .md-typeset ul ol ol,
      .md-typeset ol ol ol {
        list-style-type: lower-roman; }
    .md-typeset ul li,
    .md-typeset ol li {
      margin-bottom: 0.5em;
      margin-left: 1.25em; }
      [dir="rtl"] .md-typeset ul li, [dir="rtl"]
      .md-typeset ol li {
        margin-right: 1.25em;
        margin-left: initial; }
      .md-typeset ul li p,
      .md-typeset ul li blockquote,
      .md-typeset ol li p,
      .md-typeset ol li blockquote {
        margin: 0.5em 0; }
      .md-typeset ul li:last-child,
      .md-typeset ol li:last-child {
        margin-bottom: 0; }
      .md-typeset ul li ul,
      .md-typeset ul li ol,
      .md-typeset ol li ul,
      .md-typeset ol li ol {
        margin: 0.5em 0 0.5em 0.625em; }
        [dir="rtl"] .md-typeset ul li ul, [dir="rtl"]
        .md-typeset ul li ol, [dir="rtl"]
        .md-typeset ol li ul, [dir="rtl"]
        .md-typeset ol li ol {
          margin-right: 0.625em;
          margin-left: initial; }
  .md-typeset dd {
    margin: 1em 0 1em 1.875em; }
    [dir="rtl"] .md-typeset dd {
      margin-right: 1.875em;
      margin-left: initial; }
  .md-typeset iframe,
  .md-typeset img,
  .md-typeset svg {
    max-width: 100%; }
  .md-typeset table:not([class]) {
    -webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
    display: inline-block;
    max-width: 100%;
    border-radius: 0.2rem;
    font-size: 1.28rem;
    overflow: auto;
    -webkit-overflow-scrolling: touch; }
    .md-typeset table:not([class]) + * {
      margin-top: 1.5em; }
    .md-typeset table:not([class]) th:not([align]),
    .md-typeset table:not([class]) td:not([align]) {
      text-align: left; }
      [dir="rtl"] .md-typeset table:not([class]) th:not([align]), [dir="rtl"]
      .md-typeset table:not([class]) td:not([align]) {
        text-align: right; }
    .md-typeset table:not([class]) th {
      min-width: 10rem;
      padding: 1.2rem 1.6rem;
      background-color: rgba(0, 0, 0, 0.54);
      color: white;
      vertical-align: top; }
    .md-typeset table:not([class]) td {
      padding: 1.2rem 1.6rem;
      border-top: 0.1rem solid rgba(0, 0, 0, 0.07);
      vertical-align: top; }
    .md-typeset table:not([class]) tr:first-child td {
      border-top: 0; }
    .md-typeset table:not([class]) a {
      word-break: normal; }
  .md-typeset__scrollwrap {
    margin: 1em -1.6rem;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch; }
  .md-typeset .md-typeset__table {
    display: inline-block;
    margin-bottom: 0.5em;
    padding: 0 1.6rem; }
    .md-typeset .md-typeset__table table {
      display: table;
      width: 100%;
      margin: 0;
      overflow: hidden; }

html {
  height: 100%;
  font-size: 62.5%;
  overflow-x: hidden; }

body {
  position: relative;
  height: 100%; }

hr {
  display: block;
  height: 0.1rem;
  padding: 0;
  border: 0; }

.md-svg {
  display: none; }

.md-grid {
  max-width: 122rem;
  margin-right: auto;
  margin-left: auto; }

.md-container,
.md-main {
  overflow: auto; }

.md-container {
  display: table;
  width: 100%;
  height: 100%;
  padding-top: 4.8rem;
  table-layout: fixed; }

.md-main {
  display: table-row;
  height: 100%; }
  .md-main__inner {
    height: 100%;
    padding-top: 3rem;
    padding-bottom: 0.1rem; }

.md-toggle {
  display: none; }

.md-overlay {
  position: fixed;
  top: 0;
  width: 0;
  height: 0;
  -webkit-transition: width   0s 0.25s, height  0s 0.25s, opacity 0.25s;
  transition: width   0s 0.25s, height  0s 0.25s, opacity 0.25s;
  background-color: rgba(0, 0, 0, 0.54);
  opacity: 0;
  z-index: 3; }

.md-flex {
  display: table; }
  .md-flex__cell {
    display: table-cell;
    position: relative;
    vertical-align: top; }
    .md-flex__cell--shrink {
      width: 0%; }
    .md-flex__cell--stretch {
      display: table;
      width: 100%;
      table-layout: fixed; }
  .md-flex__ellipsis {
    display: table-cell;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden; }

.md-skip {
  position: fixed;
  width: 0.1rem;
  height: 0.1rem;
  margin: 1rem;
  padding: 0.6rem 1rem;
  clip: rect(0.1rem);
  -webkit-transform: translateY(0.8rem);
          transform: translateY(0.8rem);
  border-radius: 0.2rem;
  background-color: rgba(0, 0, 0, 0.87);
  color: white;
  font-size: 1.28rem;
  opacity: 0;
  overflow: hidden; }
  .md-skip:focus {
    width: auto;
    height: auto;
    clip: auto;
    -webkit-transform: translateX(0);
            transform: translateX(0);
    -webkit-transition: opacity 0.175s 0.075s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    transition: opacity 0.175s 0.075s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.175s 0.075s;
    transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.175s 0.075s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1;
    z-index: 10; }

@page {
  margin: 25mm; }

.md-clipboard {
  position: absolute;
  top: 0.6rem;
  right: 0.6rem;
  width: 2.8rem;
  height: 2.8rem;
  border-radius: 0.2rem;
  font-size: 1.6rem;
  cursor: pointer;
  z-index: 1;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden; }
  .md-clipboard::before {
    -webkit-transition: color   0.25s, opacity 0.25s;
    transition: color   0.25s, opacity 0.25s;
    color: rgba(0, 0, 0, 0.07);
    content: "\E14D"; }
    pre:hover .md-clipboard::before,
    .codehilite:hover .md-clipboard::before, .md-typeset .highlight:hover .md-clipboard::before {
      color: rgba(0, 0, 0, 0.54); }
  .md-clipboard:focus::before, .md-clipboard:hover::before {
    color: #536dfe; }
  .md-clipboard__message {
    display: block;
    position: absolute;
    top: 0;
    right: 3.4rem;
    padding: 0.6rem 1rem;
    -webkit-transform: translateX(0.8rem);
            transform: translateX(0.8rem);
    -webkit-transition: opacity 0.175s, -webkit-transform 0.25s cubic-bezier(0.9, 0.1, 0.9, 0);
    transition: opacity 0.175s, -webkit-transform 0.25s cubic-bezier(0.9, 0.1, 0.9, 0);
    transition: transform 0.25s cubic-bezier(0.9, 0.1, 0.9, 0), opacity 0.175s;
    transition: transform 0.25s cubic-bezier(0.9, 0.1, 0.9, 0), opacity 0.175s, -webkit-transform 0.25s cubic-bezier(0.9, 0.1, 0.9, 0);
    border-radius: 0.2rem;
    background-color: rgba(0, 0, 0, 0.54);
    color: white;
    font-size: 1.28rem;
    white-space: nowrap;
    opacity: 0;
    pointer-events: none; }
    .md-clipboard__message--active {
      -webkit-transform: translateX(0);
              transform: translateX(0);
      -webkit-transition: opacity 0.175s 0.075s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      transition: opacity 0.175s 0.075s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.175s 0.075s;
      transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.175s 0.075s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 1;
      pointer-events: initial; }
    .md-clipboard__message::before {
      content: attr(aria-label); }
    .md-clipboard__message::after {
      display: block;
      position: absolute;
      top: 50%;
      right: -0.4rem;
      width: 0;
      margin-top: -0.4rem;
      border-width: 0.4rem 0 0.4rem 0.4rem;
      border-style: solid;
      border-color: transparent rgba(0, 0, 0, 0.54);
      content: ""; }

.md-content__inner {
  margin: 0 1.6rem 2.4rem;
  padding-top: 1.2rem; }
  .md-content__inner::before {
    display: block;
    height: 0.8rem;
    content: ""; }
  .md-content__inner > :last-child {
    margin-bottom: 0; }

.md-content__icon {
  position: relative;
  margin: 0.8rem 0;
  padding: 0;
  float: right; }
  .md-typeset .md-content__icon {
    color: rgba(0, 0, 0, 0.26); }

.md-header {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  height: 4.8rem;
  -webkit-transition: background-color 0.25s, color 0.25s;
  transition: background-color 0.25s, color 0.25s;
  background-color: #3f51b5;
  color: white;
  -webkit-box-shadow: none;
          box-shadow: none;
  z-index: 2;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden; }
  .no-js .md-header {
    -webkit-transition: none;
    transition: none;
    -webkit-box-shadow: none;
            box-shadow: none; }
  .md-header[data-md-state="shadow"] {
    -webkit-transition: background-color 0.25s, color 0.25s, -webkit-box-shadow 0.25s;
    transition: background-color 0.25s, color 0.25s, -webkit-box-shadow 0.25s;
    transition: background-color 0.25s, color 0.25s, box-shadow 0.25s;
    transition: background-color 0.25s, color 0.25s, box-shadow 0.25s, -webkit-box-shadow 0.25s;
    -webkit-box-shadow: 0 0 0.4rem rgba(0, 0, 0, 0.1), 0 0.4rem 0.8rem rgba(0, 0, 0, 0.2);
            box-shadow: 0 0 0.4rem rgba(0, 0, 0, 0.1), 0 0.4rem 0.8rem rgba(0, 0, 0, 0.2); }

.md-header-nav {
  padding: 0 0.4rem; }
  .md-header-nav__button {
    position: relative;
    -webkit-transition: opacity 0.25s;
    transition: opacity 0.25s;
    z-index: 1; }
    .md-header-nav__button:hover {
      opacity: 0.7; }
    .md-header-nav__button.md-logo * {
      display: block; }
    .no-js .md-header-nav__button.md-icon--search {
      display: none; }
  .md-header-nav__topic {
    display: block;
    position: absolute;
    -webkit-transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s;
    transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden; }
    .md-header-nav__topic + .md-header-nav__topic {
      -webkit-transform: translateX(2.5rem);
              transform: translateX(2.5rem);
      -webkit-transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1);
      transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1);
      transition: transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1), opacity 0.15s;
      transition: transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1), opacity 0.15s, -webkit-transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1);
      opacity: 0;
      z-index: -1;
      pointer-events: none; }
      [dir="rtl"] .md-header-nav__topic + .md-header-nav__topic {
        -webkit-transform: translateX(-2.5rem);
                transform: translateX(-2.5rem); }
    .no-js .md-header-nav__topic {
      position: initial; }
    .no-js .md-header-nav__topic + .md-header-nav__topic {
      display: none; }
  .md-header-nav__title {
    padding: 0 2rem;
    font-size: 1.8rem;
    line-height: 4.8rem; }
    .md-header-nav__title[data-md-state="active"] .md-header-nav__topic {
      -webkit-transform: translateX(-2.5rem);
              transform: translateX(-2.5rem);
      -webkit-transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1);
      transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1);
      transition: transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1), opacity 0.15s;
      transition: transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1), opacity 0.15s, -webkit-transform 0.4s cubic-bezier(1, 0.7, 0.1, 0.1);
      opacity: 0;
      z-index: -1;
      pointer-events: none; }
      [dir="rtl"] .md-header-nav__title[data-md-state="active"] .md-header-nav__topic {
        -webkit-transform: translateX(2.5rem);
                transform: translateX(2.5rem); }
      .md-header-nav__title[data-md-state="active"] .md-header-nav__topic + .md-header-nav__topic {
        -webkit-transform: translateX(0);
                transform: translateX(0);
        -webkit-transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
        transition: opacity 0.15s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
        transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s;
        transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
        opacity: 1;
        z-index: 0;
        pointer-events: initial; }
  .md-header-nav__source {
    display: none; }

.md-hero {
  -webkit-transition: background 0.25s;
  transition: background 0.25s;
  background-color: #3f51b5;
  color: white;
  font-size: 2rem;
  overflow: hidden; }
  .md-hero__inner {
    margin-top: 2rem;
    padding: 1.6rem 1.6rem 0.8rem;
    -webkit-transition: opacity 0.25s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: opacity 0.25s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.25s;
    transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.25s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    -webkit-transition-delay: 0.1s;
            transition-delay: 0.1s; }
    [data-md-state="hidden"] .md-hero__inner {
      pointer-events: none;
      -webkit-transform: translateY(1.25rem);
              transform: translateY(1.25rem);
      -webkit-transition: opacity   0.1s 0s, -webkit-transform 0s   0.4s;
      transition: opacity   0.1s 0s, -webkit-transform 0s   0.4s;
      transition: transform 0s   0.4s, opacity   0.1s 0s;
      transition: transform 0s   0.4s, opacity   0.1s 0s, -webkit-transform 0s   0.4s;
      opacity: 0; }
    .md-hero--expand .md-hero__inner {
      margin-bottom: 2.4rem; }

.md-footer-nav {
  background-color: rgba(0, 0, 0, 0.87);
  color: white; }
  .md-footer-nav__inner {
    padding: 0.4rem;
    overflow: auto; }
  .md-footer-nav__link {
    padding-top: 2.8rem;
    padding-bottom: 0.8rem;
    -webkit-transition: opacity 0.25s;
    transition: opacity 0.25s; }
    .md-footer-nav__link:hover {
      opacity: 0.7; }
    .md-footer-nav__link--prev {
      width: 25%;
      float: left; }
      [dir="rtl"] .md-footer-nav__link--prev {
        float: right; }
    .md-footer-nav__link--next {
      width: 75%;
      float: right;
      text-align: right; }
      [dir="rtl"] .md-footer-nav__link--next {
        float: left;
        text-align: left; }
  .md-footer-nav__button {
    -webkit-transition: background 0.25s;
    transition: background 0.25s; }
  .md-footer-nav__title {
    position: relative;
    padding: 0 2rem;
    font-size: 1.8rem;
    line-height: 4.8rem; }
  .md-footer-nav__direction {
    position: absolute;
    right: 0;
    left: 0;
    margin-top: -2rem;
    padding: 0 2rem;
    color: rgba(255, 255, 255, 0.7);
    font-size: 1.5rem; }

.md-footer-meta {
  background-color: rgba(0, 0, 0, 0.895); }
  .md-footer-meta__inner {
    padding: 0.4rem;
    overflow: auto; }
  html .md-footer-meta.md-typeset a {
    color: rgba(255, 255, 255, 0.7); }
    html .md-footer-meta.md-typeset a:focus, html .md-footer-meta.md-typeset a:hover {
      color: white; }

.md-footer-copyright {
  margin: 0 1.2rem;
  padding: 0.8rem 0;
  color: rgba(255, 255, 255, 0.3);
  font-size: 1.28rem; }
  .md-footer-copyright__highlight {
    color: rgba(255, 255, 255, 0.7); }

.md-footer-social {
  margin: 0 0.8rem;
  padding: 0.4rem 0 1.2rem; }
  .md-footer-social__link {
    display: inline-block;
    width: 3.2rem;
    height: 3.2rem;
    font-size: 1.6rem;
    text-align: center; }
    .md-footer-social__link::before {
      line-height: 1.9; }

.md-nav {
  font-size: 1.4rem;
  line-height: 1.3; }
  .md-nav--secondary .md-nav__link--active {
    color: #3f51b5; }
  .md-nav__title {
    display: block;
    padding: 0 1.2rem;
    font-weight: 700;
    text-overflow: ellipsis;
    overflow: hidden; }
    .md-nav__title::before {
      display: none;
      content: "\E5C4"; }
      [dir="rtl"] .md-nav__title::before {
        content: "\E5C8"; }
    .md-nav__title .md-nav__button {
      display: none; }
  .md-nav__list {
    margin: 0;
    padding: 0;
    list-style: none; }
  .md-nav__item {
    padding: 0 1.2rem; }
    .md-nav__item:last-child {
      padding-bottom: 1.2rem; }
    .md-nav__item .md-nav__item {
      padding-right: 0; }
      [dir="rtl"] .md-nav__item .md-nav__item {
        padding-right: 1.2rem;
        padding-left: 0; }
      .md-nav__item .md-nav__item:last-child {
        padding-bottom: 0; }
  .md-nav__button img {
    width: 100%;
    height: auto; }
  .md-nav__link {
    display: block;
    margin-top: 0.625em;
    -webkit-transition: color 0.125s;
    transition: color 0.125s;
    text-overflow: ellipsis;
    cursor: pointer;
    overflow: hidden; }
    .md-nav__item--nested > .md-nav__link::after {
      content: "\E313"; }
    html .md-nav__link[for="toc"] {
      display: none; }
      html .md-nav__link[for="toc"] ~ .md-nav {
        display: none; }
      html .md-nav__link[for="toc"] + .md-nav__link::after {
        display: none; }
    .md-nav__link[data-md-state="blur"] {
      color: rgba(0, 0, 0, 0.54); }
    .md-nav__link:active {
      color: #3f51b5; }
    .md-nav__item--nested > .md-nav__link {
      color: inherit; }
    .md-nav__link:focus, .md-nav__link:hover {
      color: #536dfe; }
  .md-nav__source {
    display: none; }

.no-js .md-search {
  display: none; }

.md-search__overlay {
  opacity: 0;
  z-index: 1; }

.md-search__form {
  position: relative; }

.md-search__input {
  position: relative;
  padding: 0 4.4rem 0 7.2rem;
  text-overflow: ellipsis;
  z-index: 2; }
  [dir="rtl"] .md-search__input {
    padding: 0 7.2rem 0 4.4rem; }
  .md-search__input::-webkit-input-placeholder {
    -webkit-transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1); }
  .md-search__input:-ms-input-placeholder {
    -webkit-transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1); }
  .md-search__input::-ms-input-placeholder {
    -webkit-transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1); }
  .md-search__input::placeholder {
    -webkit-transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1); }
  .md-search__input ~ .md-search__icon, .md-search__input::-webkit-input-placeholder {
    color: rgba(0, 0, 0, 0.54); }
  .md-search__input ~ .md-search__icon, .md-search__input:-ms-input-placeholder {
    color: rgba(0, 0, 0, 0.54); }
  .md-search__input ~ .md-search__icon, .md-search__input::-ms-input-placeholder {
    color: rgba(0, 0, 0, 0.54); }
  .md-search__input ~ .md-search__icon, .md-search__input::placeholder {
    color: rgba(0, 0, 0, 0.54); }
  .md-search__input::-ms-clear {
    display: none; }

.md-search__icon {
  position: absolute;
  -webkit-transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.25s;
  transition: color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.25s;
  font-size: 2.4rem;
  cursor: pointer;
  z-index: 2; }
  .md-search__icon:hover {
    opacity: 0.7; }
  .md-search__icon[for="search"] {
    top: 0.6rem;
    left: 1rem; }
    [dir="rtl"] .md-search__icon[for="search"] {
      right: 1rem;
      left: initial; }
    .md-search__icon[for="search"]::before {
      content: "\E8B6"; }
  .md-search__icon[type="reset"] {
    top: 0.6rem;
    right: 1rem;
    -webkit-transform: scale(0.125);
            transform: scale(0.125);
    -webkit-transition: opacity 0.15s, -webkit-transform 0.15s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: opacity 0.15s, -webkit-transform 0.15s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: transform 0.15s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s;
    transition: transform 0.15s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s, -webkit-transform 0.15s cubic-bezier(0.1, 0.7, 0.1, 1);
    opacity: 0; }
    [dir="rtl"] .md-search__icon[type="reset"] {
      right: initial;
      left: 1rem; }
    [data-md-toggle="search"]:checked ~ .md-header .md-search__input:valid ~ .md-search__icon[type="reset"] {
      -webkit-transform: scale(1);
              transform: scale(1);
      opacity: 1; }
      [data-md-toggle="search"]:checked ~ .md-header .md-search__input:valid ~ .md-search__icon[type="reset"]:hover {
        opacity: 0.7; }

.md-search__output {
  position: absolute;
  width: 100%;
  border-radius: 0 0 0.2rem 0.2rem;
  overflow: hidden;
  z-index: 1; }

.md-search__scrollwrap {
  height: 100%;
  background-color: white;
  -webkit-box-shadow: 0 0.1rem 0 rgba(0, 0, 0, 0.07) inset;
          box-shadow: 0 0.1rem 0 rgba(0, 0, 0, 0.07) inset;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch; }

.md-search-result {
  color: rgba(0, 0, 0, 0.87);
  word-break: break-word; }
  .md-search-result__meta {
    padding: 0 1.6rem;
    background-color: rgba(0, 0, 0, 0.07);
    color: rgba(0, 0, 0, 0.54);
    font-size: 1.28rem;
    line-height: 3.6rem; }
  .md-search-result__list {
    margin: 0;
    padding: 0;
    border-top: 0.1rem solid rgba(0, 0, 0, 0.07);
    list-style: none; }
  .md-search-result__item {
    -webkit-box-shadow: 0 -0.1rem 0 rgba(0, 0, 0, 0.07);
            box-shadow: 0 -0.1rem 0 rgba(0, 0, 0, 0.07); }
  .md-search-result__link {
    display: block;
    -webkit-transition: background 0.25s;
    transition: background 0.25s;
    outline: 0;
    overflow: hidden; }
    .md-search-result__link[data-md-state="active"], .md-search-result__link:hover {
      background-color: rgba(83, 109, 254, 0.1); }
      .md-search-result__link[data-md-state="active"] .md-search-result__article::before, .md-search-result__link:hover .md-search-result__article::before {
        opacity: 0.7; }
    .md-search-result__link:last-child .md-search-result__teaser {
      margin-bottom: 1.2rem; }
  .md-search-result__article {
    position: relative;
    padding: 0 1.6rem;
    overflow: auto; }
    .md-search-result__article--document::before {
      position: absolute;
      left: 0;
      margin: 0.2rem;
      -webkit-transition: opacity 0.25s;
      transition: opacity 0.25s;
      color: rgba(0, 0, 0, 0.54);
      content: "\E880"; }
      [dir="rtl"] .md-search-result__article--document::before {
        right: 0;
        left: initial; }
    .md-search-result__article--document .md-search-result__title {
      margin: 1.1rem 0;
      font-size: 1.6rem;
      font-weight: 400;
      line-height: 1.4; }
  .md-search-result__title {
    margin: 0.5em 0;
    font-size: 1.28rem;
    font-weight: 700;
    line-height: 1.4; }
  .md-search-result__teaser {
    display: -webkit-box;
    max-height: 3.3rem;
    margin: 0.5em 0;
    color: rgba(0, 0, 0, 0.54);
    font-size: 1.28rem;
    line-height: 1.4;
    text-overflow: ellipsis;
    overflow: hidden;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2; }
  .md-search-result em {
    font-style: normal;
    font-weight: 700;
    text-decoration: underline; }

.md-sidebar {
  position: absolute;
  width: 24.2rem;
  padding: 2.4rem 0;
  overflow: hidden; }
  .md-sidebar[data-md-state="lock"] {
    position: fixed;
    top: 4.8rem; }
  .md-sidebar--secondary {
    display: none; }
  .md-sidebar__scrollwrap {
    max-height: 100%;
    margin: 0 0.4rem;
    overflow-y: auto;
    -webkit-backface-visibility: hidden;
            backface-visibility: hidden; }
    .md-sidebar__scrollwrap::-webkit-scrollbar {
      width: 0.4rem;
      height: 0.4rem; }
    .md-sidebar__scrollwrap::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.26); }
      .md-sidebar__scrollwrap::-webkit-scrollbar-thumb:hover {
        background-color: #536dfe; }

@-webkit-keyframes md-source__facts--done {
  0% {
    height: 0; }
  100% {
    height: 1.3rem; } }

@keyframes md-source__facts--done {
  0% {
    height: 0; }
  100% {
    height: 1.3rem; } }

@-webkit-keyframes md-source__fact--done {
  0% {
    -webkit-transform: translateY(100%);
            transform: translateY(100%);
    opacity: 0; }
  50% {
    opacity: 0; }
  100% {
    -webkit-transform: translateY(0%);
            transform: translateY(0%);
    opacity: 1; } }

@keyframes md-source__fact--done {
  0% {
    -webkit-transform: translateY(100%);
            transform: translateY(100%);
    opacity: 0; }
  50% {
    opacity: 0; }
  100% {
    -webkit-transform: translateY(0%);
            transform: translateY(0%);
    opacity: 1; } }

.md-source {
  display: block;
  padding-right: 1.2rem;
  -webkit-transition: opacity 0.25s;
  transition: opacity 0.25s;
  font-size: 1.3rem;
  line-height: 1.2;
  white-space: nowrap; }
  [dir="rtl"] .md-source {
    padding-right: initial;
    padding-left: 1.2rem; }
  .md-source:hover {
    opacity: 0.7; }
  .md-source::after {
    display: inline-block;
    height: 4.8rem;
    content: "";
    vertical-align: middle; }
  .md-source__icon {
    display: inline-block;
    width: 4.8rem;
    height: 4.8rem;
    content: "";
    vertical-align: middle; }
    .md-source__icon svg {
      width: 2.4rem;
      height: 2.4rem;
      margin-top: 1.2rem;
      margin-left: 1.2rem; }
      [dir="rtl"] .md-source__icon svg {
        margin-right: 1.2rem;
        margin-left: initial; }
    .md-source__icon + .md-source__repository {
      margin-left: -4.4rem;
      padding-left: 4rem; }
      [dir="rtl"] .md-source__icon + .md-source__repository {
        margin-right: -4.4rem;
        margin-left: initial;
        padding-right: 4rem;
        padding-left: initial; }
  .md-source__repository {
    display: inline-block;
    max-width: 100%;
    margin-left: 1.2rem;
    font-weight: 700;
    text-overflow: ellipsis;
    overflow: hidden;
    vertical-align: middle; }
  .md-source__facts {
    margin: 0;
    padding: 0;
    font-size: 1.1rem;
    font-weight: 700;
    list-style-type: none;
    opacity: 0.75;
    overflow: hidden; }
    [data-md-state="done"] .md-source__facts {
      -webkit-animation: md-source__facts--done 0.25s ease-in;
              animation: md-source__facts--done 0.25s ease-in; }
  .md-source__fact {
    float: left; }
    [dir="rtl"] .md-source__fact {
      float: right; }
    [data-md-state="done"] .md-source__fact {
      -webkit-animation: md-source__fact--done 0.4s ease-out;
              animation: md-source__fact--done 0.4s ease-out; }
    .md-source__fact::before {
      margin: 0 0.2rem;
      content: "\B7"; }
    .md-source__fact:first-child::before {
      display: none; }

.md-source-file {
  display: inline-block;
  margin: 1em 0.5em 1em 0;
  padding-right: 0.5rem;
  border-radius: 0.2rem;
  background-color: rgba(0, 0, 0, 0.07);
  font-size: 1.28rem;
  list-style-type: none;
  cursor: pointer;
  overflow: hidden; }
  .md-source-file::before {
    display: inline-block;
    margin-right: 0.5rem;
    padding: 0.5rem;
    background-color: rgba(0, 0, 0, 0.26);
    color: white;
    font-size: 1.6rem;
    content: "\E86F";
    vertical-align: middle; }
  html .md-source-file {
    -webkit-transition: background 0.4s, color 0.4s, -webkit-box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    transition: background 0.4s, color 0.4s, -webkit-box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    transition: background 0.4s, color 0.4s, box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    transition: background 0.4s, color 0.4s, box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1); }
    html .md-source-file::before {
      -webkit-transition: inherit;
      transition: inherit; }
  html body .md-typeset .md-source-file {
    color: rgba(0, 0, 0, 0.54); }
  .md-source-file:hover {
    -webkit-box-shadow: 0 0 8px rgba(0, 0, 0, 0.18), 0 8px 16px rgba(0, 0, 0, 0.36);
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.18), 0 8px 16px rgba(0, 0, 0, 0.36); }
    .md-source-file:hover::before {
      background-color: #536dfe; }

.md-tabs {
  width: 100%;
  -webkit-transition: background 0.25s;
  transition: background 0.25s;
  background-color: #3f51b5;
  color: white;
  overflow: auto; }
  .md-tabs__list {
    margin: 0;
    margin-left: 0.4rem;
    padding: 0;
    list-style: none;
    white-space: nowrap; }
  .md-tabs__item {
    display: inline-block;
    height: 4.8rem;
    padding-right: 1.2rem;
    padding-left: 1.2rem; }
  .md-tabs__link {
    display: block;
    margin-top: 1.6rem;
    -webkit-transition: opacity 0.25s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: opacity 0.25s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.25s;
    transition: transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.25s, -webkit-transform 0.4s cubic-bezier(0.1, 0.7, 0.1, 1);
    font-size: 1.4rem;
    opacity: 0.7; }
    .md-tabs__link--active, .md-tabs__link:hover {
      color: inherit;
      opacity: 1; }
    .md-tabs__item:nth-child(2) .md-tabs__link {
      -webkit-transition-delay: 0.02s;
              transition-delay: 0.02s; }
    .md-tabs__item:nth-child(3) .md-tabs__link {
      -webkit-transition-delay: 0.04s;
              transition-delay: 0.04s; }
    .md-tabs__item:nth-child(4) .md-tabs__link {
      -webkit-transition-delay: 0.06s;
              transition-delay: 0.06s; }
    .md-tabs__item:nth-child(5) .md-tabs__link {
      -webkit-transition-delay: 0.08s;
              transition-delay: 0.08s; }
    .md-tabs__item:nth-child(6) .md-tabs__link {
      -webkit-transition-delay: 0.1s;
              transition-delay: 0.1s; }
    .md-tabs__item:nth-child(7) .md-tabs__link {
      -webkit-transition-delay: 0.12s;
              transition-delay: 0.12s; }
    .md-tabs__item:nth-child(8) .md-tabs__link {
      -webkit-transition-delay: 0.14s;
              transition-delay: 0.14s; }
    .md-tabs__item:nth-child(9) .md-tabs__link {
      -webkit-transition-delay: 0.16s;
              transition-delay: 0.16s; }
    .md-tabs__item:nth-child(10) .md-tabs__link {
      -webkit-transition-delay: 0.18s;
              transition-delay: 0.18s; }
    .md-tabs__item:nth-child(11) .md-tabs__link {
      -webkit-transition-delay: 0.2s;
              transition-delay: 0.2s; }
    .md-tabs__item:nth-child(12) .md-tabs__link {
      -webkit-transition-delay: 0.22s;
              transition-delay: 0.22s; }
    .md-tabs__item:nth-child(13) .md-tabs__link {
      -webkit-transition-delay: 0.24s;
              transition-delay: 0.24s; }
    .md-tabs__item:nth-child(14) .md-tabs__link {
      -webkit-transition-delay: 0.26s;
              transition-delay: 0.26s; }
    .md-tabs__item:nth-child(15) .md-tabs__link {
      -webkit-transition-delay: 0.28s;
              transition-delay: 0.28s; }
    .md-tabs__item:nth-child(16) .md-tabs__link {
      -webkit-transition-delay: 0.3s;
              transition-delay: 0.3s; }
  .md-tabs[data-md-state="hidden"] {
    pointer-events: none; }
    .md-tabs[data-md-state="hidden"] .md-tabs__link {
      -webkit-transform: translateY(50%);
              transform: translateY(50%);
      -webkit-transition: color     0.25s, opacity   0.1s, -webkit-transform 0s 0.4s;
      transition: color     0.25s, opacity   0.1s, -webkit-transform 0s 0.4s;
      transition: color     0.25s, transform 0s 0.4s, opacity   0.1s;
      transition: color     0.25s, transform 0s 0.4s, opacity   0.1s, -webkit-transform 0s 0.4s;
      opacity: 0; }

.md-typeset .admonition, .md-typeset details {
  -webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
  position: relative;
  margin: 1.5625em 0;
  padding: 0 1.2rem;
  border-left: 0.4rem solid #448aff;
  border-radius: 0.2rem;
  font-size: 1.28rem;
  overflow: auto; }
  [dir="rtl"] .md-typeset .admonition, [dir="rtl"] .md-typeset details {
    border-right: 0.4rem solid #448aff;
    border-left: none; }
  html .md-typeset .admonition > :last-child, html .md-typeset details > :last-child {
    margin-bottom: 1.2rem; }
  .md-typeset .admonition .admonition, .md-typeset details .admonition, .md-typeset .admonition details, .md-typeset details details {
    margin: 1em 0; }
  .md-typeset .admonition > .admonition-title, .md-typeset details > .admonition-title, .md-typeset .admonition > summary, .md-typeset details > summary {
    margin: 0 -1.2rem;
    padding: 0.8rem 1.2rem 0.8rem 4rem;
    border-bottom: 0.1rem solid rgba(68, 138, 255, 0.1);
    background-color: rgba(68, 138, 255, 0.1);
    font-weight: 700; }
    [dir="rtl"] .md-typeset .admonition > .admonition-title, [dir="rtl"] .md-typeset details > .admonition-title, [dir="rtl"] .md-typeset .admonition > summary, [dir="rtl"] .md-typeset details > summary {
      padding: 0.8rem 4rem 0.8rem 1.2rem; }
    .md-typeset .admonition > .admonition-title:last-child, .md-typeset details > .admonition-title:last-child, .md-typeset .admonition > summary:last-child, .md-typeset details > summary:last-child {
      margin-bottom: 0; }
    .md-typeset .admonition > .admonition-title::before, .md-typeset details > .admonition-title::before, .md-typeset .admonition > summary::before, .md-typeset details > summary::before {
      position: absolute;
      left: 1.2rem;
      color: #448aff;
      font-size: 2rem;
      content: "\E3C9"; }
      [dir="rtl"] .md-typeset .admonition > .admonition-title::before, [dir="rtl"] .md-typeset details > .admonition-title::before, [dir="rtl"] .md-typeset .admonition > summary::before, [dir="rtl"] .md-typeset details > summary::before {
        right: 1.2rem;
        left: initial; }
  .md-typeset .admonition.summary, .md-typeset details.summary, .md-typeset .admonition.tldr, .md-typeset details.tldr, .md-typeset .admonition.abstract, .md-typeset details.abstract {
    border-left-color: #00b0ff; }
    [dir="rtl"] .md-typeset .admonition.summary, [dir="rtl"] .md-typeset details.summary, [dir="rtl"] .md-typeset .admonition.tldr, [dir="rtl"] .md-typeset details.tldr, [dir="rtl"] .md-typeset .admonition.abstract, [dir="rtl"] .md-typeset details.abstract {
      border-right-color: #00b0ff; }
    .md-typeset .admonition.summary > .admonition-title, .md-typeset details.summary > .admonition-title, .md-typeset .admonition.tldr > .admonition-title, .md-typeset details.tldr > .admonition-title, .md-typeset .admonition.summary > summary, .md-typeset details.summary > summary, .md-typeset .admonition.tldr > summary, .md-typeset details.tldr > summary, .md-typeset .admonition.abstract > .admonition-title, .md-typeset details.abstract > .admonition-title, .md-typeset .admonition.abstract > summary, .md-typeset details.abstract > summary {
      border-bottom-color: 0.1rem solid rgba(0, 176, 255, 0.1);
      background-color: rgba(0, 176, 255, 0.1); }
      .md-typeset .admonition.summary > .admonition-title::before, .md-typeset details.summary > .admonition-title::before, .md-typeset .admonition.tldr > .admonition-title::before, .md-typeset details.tldr > .admonition-title::before, .md-typeset .admonition.summary > summary::before, .md-typeset details.summary > summary::before, .md-typeset .admonition.tldr > summary::before, .md-typeset details.tldr > summary::before, .md-typeset .admonition.abstract > .admonition-title::before, .md-typeset details.abstract > .admonition-title::before, .md-typeset .admonition.abstract > summary::before, .md-typeset details.abstract > summary::before {
        color: #00b0ff;
        content: "\E8D2"; }
  .md-typeset .admonition.todo, .md-typeset details.todo, .md-typeset .admonition.info, .md-typeset details.info {
    border-left-color: #00b8d4; }
    [dir="rtl"] .md-typeset .admonition.todo, [dir="rtl"] .md-typeset details.todo, [dir="rtl"] .md-typeset .admonition.info, [dir="rtl"] .md-typeset details.info {
      border-right-color: #00b8d4; }
    .md-typeset .admonition.todo > .admonition-title, .md-typeset details.todo > .admonition-title, .md-typeset .admonition.todo > summary, .md-typeset details.todo > summary, .md-typeset .admonition.info > .admonition-title, .md-typeset details.info > .admonition-title, .md-typeset .admonition.info > summary, .md-typeset details.info > summary {
      border-bottom-color: 0.1rem solid rgba(0, 184, 212, 0.1);
      background-color: rgba(0, 184, 212, 0.1); }
      .md-typeset .admonition.todo > .admonition-title::before, .md-typeset details.todo > .admonition-title::before, .md-typeset .admonition.todo > summary::before, .md-typeset details.todo > summary::before, .md-typeset .admonition.info > .admonition-title::before, .md-typeset details.info > .admonition-title::before, .md-typeset .admonition.info > summary::before, .md-typeset details.info > summary::before {
        color: #00b8d4;
        content: "\E88E"; }
  .md-typeset .admonition.hint, .md-typeset details.hint, .md-typeset .admonition.important, .md-typeset details.important, .md-typeset .admonition.tip, .md-typeset details.tip {
    border-left-color: #00bfa5; }
    [dir="rtl"] .md-typeset .admonition.hint, [dir="rtl"] .md-typeset details.hint, [dir="rtl"] .md-typeset .admonition.important, [dir="rtl"] .md-typeset details.important, [dir="rtl"] .md-typeset .admonition.tip, [dir="rtl"] .md-typeset details.tip {
      border-right-color: #00bfa5; }
    .md-typeset .admonition.hint > .admonition-title, .md-typeset details.hint > .admonition-title, .md-typeset .admonition.important > .admonition-title, .md-typeset details.important > .admonition-title, .md-typeset .admonition.hint > summary, .md-typeset details.hint > summary, .md-typeset .admonition.important > summary, .md-typeset details.important > summary, .md-typeset .admonition.tip > .admonition-title, .md-typeset details.tip > .admonition-title, .md-typeset .admonition.tip > summary, .md-typeset details.tip > summary {
      border-bottom-color: 0.1rem solid rgba(0, 191, 165, 0.1);
      background-color: rgba(0, 191, 165, 0.1); }
      .md-typeset .admonition.hint > .admonition-title::before, .md-typeset details.hint > .admonition-title::before, .md-typeset .admonition.important > .admonition-title::before, .md-typeset details.important > .admonition-title::before, .md-typeset .admonition.hint > summary::before, .md-typeset details.hint > summary::before, .md-typeset .admonition.important > summary::before, .md-typeset details.important > summary::before, .md-typeset .admonition.tip > .admonition-title::before, .md-typeset details.tip > .admonition-title::before, .md-typeset .admonition.tip > summary::before, .md-typeset details.tip > summary::before {
        color: #00bfa5;
        content: "\E80E"; }
  .md-typeset .admonition.check, .md-typeset details.check, .md-typeset .admonition.done, .md-typeset details.done, .md-typeset .admonition.success, .md-typeset details.success {
    border-left-color: #00c853; }
    [dir="rtl"] .md-typeset .admonition.check, [dir="rtl"] .md-typeset details.check, [dir="rtl"] .md-typeset .admonition.done, [dir="rtl"] .md-typeset details.done, [dir="rtl"] .md-typeset .admonition.success, [dir="rtl"] .md-typeset details.success {
      border-right-color: #00c853; }
    .md-typeset .admonition.check > .admonition-title, .md-typeset details.check > .admonition-title, .md-typeset .admonition.done > .admonition-title, .md-typeset details.done > .admonition-title, .md-typeset .admonition.check > summary, .md-typeset details.check > summary, .md-typeset .admonition.done > summary, .md-typeset details.done > summary, .md-typeset .admonition.success > .admonition-title, .md-typeset details.success > .admonition-title, .md-typeset .admonition.success > summary, .md-typeset details.success > summary {
      border-bottom-color: 0.1rem solid rgba(0, 200, 83, 0.1);
      background-color: rgba(0, 200, 83, 0.1); }
      .md-typeset .admonition.check > .admonition-title::before, .md-typeset details.check > .admonition-title::before, .md-typeset .admonition.done > .admonition-title::before, .md-typeset details.done > .admonition-title::before, .md-typeset .admonition.check > summary::before, .md-typeset details.check > summary::before, .md-typeset .admonition.done > summary::before, .md-typeset details.done > summary::before, .md-typeset .admonition.success > .admonition-title::before, .md-typeset details.success > .admonition-title::before, .md-typeset .admonition.success > summary::before, .md-typeset details.success > summary::before {
        color: #00c853;
        content: "\E876"; }
  .md-typeset .admonition.help, .md-typeset details.help, .md-typeset .admonition.faq, .md-typeset details.faq, .md-typeset .admonition.question, .md-typeset details.question {
    border-left-color: #64dd17; }
    [dir="rtl"] .md-typeset .admonition.help, [dir="rtl"] .md-typeset details.help, [dir="rtl"] .md-typeset .admonition.faq, [dir="rtl"] .md-typeset details.faq, [dir="rtl"] .md-typeset .admonition.question, [dir="rtl"] .md-typeset details.question {
      border-right-color: #64dd17; }
    .md-typeset .admonition.help > .admonition-title, .md-typeset details.help > .admonition-title, .md-typeset .admonition.faq > .admonition-title, .md-typeset details.faq > .admonition-title, .md-typeset .admonition.help > summary, .md-typeset details.help > summary, .md-typeset .admonition.faq > summary, .md-typeset details.faq > summary, .md-typeset .admonition.question > .admonition-title, .md-typeset details.question > .admonition-title, .md-typeset .admonition.question > summary, .md-typeset details.question > summary {
      border-bottom-color: 0.1rem solid rgba(100, 221, 23, 0.1);
      background-color: rgba(100, 221, 23, 0.1); }
      .md-typeset .admonition.help > .admonition-title::before, .md-typeset details.help > .admonition-title::before, .md-typeset .admonition.faq > .admonition-title::before, .md-typeset details.faq > .admonition-title::before, .md-typeset .admonition.help > summary::before, .md-typeset details.help > summary::before, .md-typeset .admonition.faq > summary::before, .md-typeset details.faq > summary::before, .md-typeset .admonition.question > .admonition-title::before, .md-typeset details.question > .admonition-title::before, .md-typeset .admonition.question > summary::before, .md-typeset details.question > summary::before {
        color: #64dd17;
        content: "\E887"; }
  .md-typeset .admonition.caution, .md-typeset details.caution, .md-typeset .admonition.attention, .md-typeset details.attention, .md-typeset .admonition.warning, .md-typeset details.warning {
    border-left-color: #ff9100; }
    [dir="rtl"] .md-typeset .admonition.caution, [dir="rtl"] .md-typeset details.caution, [dir="rtl"] .md-typeset .admonition.attention, [dir="rtl"] .md-typeset details.attention, [dir="rtl"] .md-typeset .admonition.warning, [dir="rtl"] .md-typeset details.warning {
      border-right-color: #ff9100; }
    .md-typeset .admonition.caution > .admonition-title, .md-typeset details.caution > .admonition-title, .md-typeset .admonition.attention > .admonition-title, .md-typeset details.attention > .admonition-title, .md-typeset .admonition.caution > summary, .md-typeset details.caution > summary, .md-typeset .admonition.attention > summary, .md-typeset details.attention > summary, .md-typeset .admonition.warning > .admonition-title, .md-typeset details.warning > .admonition-title, .md-typeset .admonition.warning > summary, .md-typeset details.warning > summary {
      border-bottom-color: 0.1rem solid rgba(255, 145, 0, 0.1);
      background-color: rgba(255, 145, 0, 0.1); }
      .md-typeset .admonition.caution > .admonition-title::before, .md-typeset details.caution > .admonition-title::before, .md-typeset .admonition.attention > .admonition-title::before, .md-typeset details.attention > .admonition-title::before, .md-typeset .admonition.caution > summary::before, .md-typeset details.caution > summary::before, .md-typeset .admonition.attention > summary::before, .md-typeset details.attention > summary::before, .md-typeset .admonition.warning > .admonition-title::before, .md-typeset details.warning > .admonition-title::before, .md-typeset .admonition.warning > summary::before, .md-typeset details.warning > summary::before {
        color: #ff9100;
        content: "\E002"; }
  .md-typeset .admonition.fail, .md-typeset details.fail, .md-typeset .admonition.missing, .md-typeset details.missing, .md-typeset .admonition.failure, .md-typeset details.failure {
    border-left-color: #ff5252; }
    [dir="rtl"] .md-typeset .admonition.fail, [dir="rtl"] .md-typeset details.fail, [dir="rtl"] .md-typeset .admonition.missing, [dir="rtl"] .md-typeset details.missing, [dir="rtl"] .md-typeset .admonition.failure, [dir="rtl"] .md-typeset details.failure {
      border-right-color: #ff5252; }
    .md-typeset .admonition.fail > .admonition-title, .md-typeset details.fail > .admonition-title, .md-typeset .admonition.missing > .admonition-title, .md-typeset details.missing > .admonition-title, .md-typeset .admonition.fail > summary, .md-typeset details.fail > summary, .md-typeset .admonition.missing > summary, .md-typeset details.missing > summary, .md-typeset .admonition.failure > .admonition-title, .md-typeset details.failure > .admonition-title, .md-typeset .admonition.failure > summary, .md-typeset details.failure > summary {
      border-bottom-color: 0.1rem solid rgba(255, 82, 82, 0.1);
      background-color: rgba(255, 82, 82, 0.1); }
      .md-typeset .admonition.fail > .admonition-title::before, .md-typeset details.fail > .admonition-title::before, .md-typeset .admonition.missing > .admonition-title::before, .md-typeset details.missing > .admonition-title::before, .md-typeset .admonition.fail > summary::before, .md-typeset details.fail > summary::before, .md-typeset .admonition.missing > summary::before, .md-typeset details.missing > summary::before, .md-typeset .admonition.failure > .admonition-title::before, .md-typeset details.failure > .admonition-title::before, .md-typeset .admonition.failure > summary::before, .md-typeset details.failure > summary::before {
        color: #ff5252;
        content: "\E14C"; }
  .md-typeset .admonition.error, .md-typeset details.error, .md-typeset .admonition.danger, .md-typeset details.danger {
    border-left-color: #ff1744; }
    [dir="rtl"] .md-typeset .admonition.error, [dir="rtl"] .md-typeset details.error, [dir="rtl"] .md-typeset .admonition.danger, [dir="rtl"] .md-typeset details.danger {
      border-right-color: #ff1744; }
    .md-typeset .admonition.error > .admonition-title, .md-typeset details.error > .admonition-title, .md-typeset .admonition.error > summary, .md-typeset details.error > summary, .md-typeset .admonition.danger > .admonition-title, .md-typeset details.danger > .admonition-title, .md-typeset .admonition.danger > summary, .md-typeset details.danger > summary {
      border-bottom-color: 0.1rem solid rgba(255, 23, 68, 0.1);
      background-color: rgba(255, 23, 68, 0.1); }
      .md-typeset .admonition.error > .admonition-title::before, .md-typeset details.error > .admonition-title::before, .md-typeset .admonition.error > summary::before, .md-typeset details.error > summary::before, .md-typeset .admonition.danger > .admonition-title::before, .md-typeset details.danger > .admonition-title::before, .md-typeset .admonition.danger > summary::before, .md-typeset details.danger > summary::before {
        color: #ff1744;
        content: "\E3E7"; }
  .md-typeset .admonition.bug, .md-typeset details.bug {
    border-left-color: #f50057; }
    [dir="rtl"] .md-typeset .admonition.bug, [dir="rtl"] .md-typeset details.bug {
      border-right-color: #f50057; }
    .md-typeset .admonition.bug > .admonition-title, .md-typeset details.bug > .admonition-title, .md-typeset .admonition.bug > summary, .md-typeset details.bug > summary {
      border-bottom-color: 0.1rem solid rgba(245, 0, 87, 0.1);
      background-color: rgba(245, 0, 87, 0.1); }
      .md-typeset .admonition.bug > .admonition-title::before, .md-typeset details.bug > .admonition-title::before, .md-typeset .admonition.bug > summary::before, .md-typeset details.bug > summary::before {
        color: #f50057;
        content: "\E868"; }
  .md-typeset .admonition.example, .md-typeset details.example {
    border-left-color: #651fff; }
    [dir="rtl"] .md-typeset .admonition.example, [dir="rtl"] .md-typeset details.example {
      border-right-color: #651fff; }
    .md-typeset .admonition.example > .admonition-title, .md-typeset details.example > .admonition-title, .md-typeset .admonition.example > summary, .md-typeset details.example > summary {
      border-bottom-color: 0.1rem solid rgba(101, 31, 255, 0.1);
      background-color: rgba(101, 31, 255, 0.1); }
      .md-typeset .admonition.example > .admonition-title::before, .md-typeset details.example > .admonition-title::before, .md-typeset .admonition.example > summary::before, .md-typeset details.example > summary::before {
        color: #651fff;
        content: "\E242"; }
  .md-typeset .admonition.cite, .md-typeset details.cite, .md-typeset .admonition.quote, .md-typeset details.quote {
    border-left-color: #9e9e9e; }
    [dir="rtl"] .md-typeset .admonition.cite, [dir="rtl"] .md-typeset details.cite, [dir="rtl"] .md-typeset .admonition.quote, [dir="rtl"] .md-typeset details.quote {
      border-right-color: #9e9e9e; }
    .md-typeset .admonition.cite > .admonition-title, .md-typeset details.cite > .admonition-title, .md-typeset .admonition.cite > summary, .md-typeset details.cite > summary, .md-typeset .admonition.quote > .admonition-title, .md-typeset details.quote > .admonition-title, .md-typeset .admonition.quote > summary, .md-typeset details.quote > summary {
      border-bottom-color: 0.1rem solid rgba(158, 158, 158, 0.1);
      background-color: rgba(158, 158, 158, 0.1); }
      .md-typeset .admonition.cite > .admonition-title::before, .md-typeset details.cite > .admonition-title::before, .md-typeset .admonition.cite > summary::before, .md-typeset details.cite > summary::before, .md-typeset .admonition.quote > .admonition-title::before, .md-typeset details.quote > .admonition-title::before, .md-typeset .admonition.quote > summary::before, .md-typeset details.quote > summary::before {
        color: #9e9e9e;
        content: "\E244"; }

.codehilite .o, .md-typeset .highlight .o {
  color: inherit; }

.codehilite .ow, .md-typeset .highlight .ow {
  color: inherit; }

.codehilite .ge, .md-typeset .highlight .ge {
  color: #000000; }

.codehilite .gr, .md-typeset .highlight .gr {
  color: #AA0000; }

.codehilite .gh, .md-typeset .highlight .gh {
  color: #999999; }

.codehilite .go, .md-typeset .highlight .go {
  color: #888888; }

.codehilite .gp, .md-typeset .highlight .gp {
  color: #555555; }

.codehilite .gs, .md-typeset .highlight .gs {
  color: inherit; }

.codehilite .gu, .md-typeset .highlight .gu {
  color: #AAAAAA; }

.codehilite .gt, .md-typeset .highlight .gt {
  color: #AA0000; }

.codehilite .gd, .md-typeset .highlight .gd {
  background-color: #FFDDDD; }

.codehilite .gi, .md-typeset .highlight .gi {
  background-color: #DDFFDD; }

.codehilite .k, .md-typeset .highlight .k {
  color: #3B78E7; }

.codehilite .kc, .md-typeset .highlight .kc {
  color: #A71D5D; }

.codehilite .kd, .md-typeset .highlight .kd {
  color: #3B78E7; }

.codehilite .kn, .md-typeset .highlight .kn {
  color: #3B78E7; }

.codehilite .kp, .md-typeset .highlight .kp {
  color: #A71D5D; }

.codehilite .kr, .md-typeset .highlight .kr {
  color: #3E61A2; }

.codehilite .kt, .md-typeset .highlight .kt {
  color: #3E61A2; }

.codehilite .c, .md-typeset .highlight .c {
  color: #999999; }

.codehilite .cm, .md-typeset .highlight .cm {
  color: #999999; }

.codehilite .cp, .md-typeset .highlight .cp {
  color: #666666; }

.codehilite .c1, .md-typeset .highlight .c1 {
  color: #999999; }

.codehilite .ch, .md-typeset .highlight .ch {
  color: #999999; }

.codehilite .cs, .md-typeset .highlight .cs {
  color: #999999; }

.codehilite .na, .md-typeset .highlight .na {
  color: #C2185B; }

.codehilite .nb, .md-typeset .highlight .nb {
  color: #C2185B; }

.codehilite .bp, .md-typeset .highlight .bp {
  color: #3E61A2; }

.codehilite .nc, .md-typeset .highlight .nc {
  color: #C2185B; }

.codehilite .no, .md-typeset .highlight .no {
  color: #3E61A2; }

.codehilite .nd, .md-typeset .highlight .nd {
  color: #666666; }

.codehilite .ni, .md-typeset .highlight .ni {
  color: #666666; }

.codehilite .ne, .md-typeset .highlight .ne {
  color: #C2185B; }

.codehilite .nf, .md-typeset .highlight .nf {
  color: #C2185B; }

.codehilite .nl, .md-typeset .highlight .nl {
  color: #3B5179; }

.codehilite .nn, .md-typeset .highlight .nn {
  color: #EC407A; }

.codehilite .nt, .md-typeset .highlight .nt {
  color: #3B78E7; }

.codehilite .nv, .md-typeset .highlight .nv {
  color: #3E61A2; }

.codehilite .vc, .md-typeset .highlight .vc {
  color: #3E61A2; }

.codehilite .vg, .md-typeset .highlight .vg {
  color: #3E61A2; }

.codehilite .vi, .md-typeset .highlight .vi {
  color: #3E61A2; }

.codehilite .nx, .md-typeset .highlight .nx {
  color: #EC407A; }

.codehilite .m, .md-typeset .highlight .m {
  color: #E74C3C; }

.codehilite .mf, .md-typeset .highlight .mf {
  color: #E74C3C; }

.codehilite .mh, .md-typeset .highlight .mh {
  color: #E74C3C; }

.codehilite .mi, .md-typeset .highlight .mi {
  color: #E74C3C; }

.codehilite .il, .md-typeset .highlight .il {
  color: #E74C3C; }

.codehilite .mo, .md-typeset .highlight .mo {
  color: #E74C3C; }

.codehilite .s, .md-typeset .highlight .s {
  color: #0D904F; }

.codehilite .sb, .md-typeset .highlight .sb {
  color: #0D904F; }

.codehilite .sc, .md-typeset .highlight .sc {
  color: #0D904F; }

.codehilite .sd, .md-typeset .highlight .sd {
  color: #999999; }

.codehilite .s2, .md-typeset .highlight .s2 {
  color: #0D904F; }

.codehilite .se, .md-typeset .highlight .se {
  color: #183691; }

.codehilite .sh, .md-typeset .highlight .sh {
  color: #183691; }

.codehilite .si, .md-typeset .highlight .si {
  color: #183691; }

.codehilite .sx, .md-typeset .highlight .sx {
  color: #183691; }

.codehilite .sr, .md-typeset .highlight .sr {
  color: #009926; }

.codehilite .s1, .md-typeset .highlight .s1 {
  color: #0D904F; }

.codehilite .ss, .md-typeset .highlight .ss {
  color: #0D904F; }

.codehilite .err, .md-typeset .highlight .err {
  color: #A61717; }

.codehilite .w, .md-typeset .highlight .w {
  color: transparent; }

.codehilite .hll, .md-typeset .highlight .hll {
  display: block;
  margin: 0 -1.2rem;
  padding: 0 1.2rem;
  background-color: rgba(255, 235, 59, 0.5); }

.md-typeset .codehilite, .md-typeset .highlight {
  position: relative;
  margin: 1em 0;
  padding: 0;
  border-radius: 0.2rem;
  background-color: rgba(236, 236, 236, 0.5);
  color: #37474F;
  line-height: 1.4;
  -webkit-overflow-scrolling: touch; }
  .md-typeset .codehilite pre, .md-typeset .highlight pre,
  .md-typeset .codehilite code, .md-typeset .highlight code {
    display: block;
    margin: 0;
    padding: 1.05rem 1.2rem;
    background-color: transparent;
    overflow: auto;
    vertical-align: top; }
    .md-typeset .codehilite pre::-webkit-scrollbar, .md-typeset .highlight pre::-webkit-scrollbar,
    .md-typeset .codehilite code::-webkit-scrollbar, .md-typeset .highlight code::-webkit-scrollbar {
      width: 0.4rem;
      height: 0.4rem; }
    .md-typeset .codehilite pre::-webkit-scrollbar-thumb, .md-typeset .highlight pre::-webkit-scrollbar-thumb,
    .md-typeset .codehilite code::-webkit-scrollbar-thumb, .md-typeset .highlight code::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.26); }
      .md-typeset .codehilite pre::-webkit-scrollbar-thumb:hover, .md-typeset .highlight pre::-webkit-scrollbar-thumb:hover,
      .md-typeset .codehilite code::-webkit-scrollbar-thumb:hover, .md-typeset .highlight code::-webkit-scrollbar-thumb:hover {
        background-color: #536dfe; }

.md-typeset pre.codehilite, .md-typeset pre.highlight {
  overflow: visible; }
  .md-typeset pre.codehilite code, .md-typeset pre.highlight code {
    display: block;
    padding: 1.05rem 1.2rem;
    overflow: auto; }

.md-typeset .codehilitetable {
  display: block;
  margin: 1em 0;
  border-radius: 0.2em;
  font-size: 1.6rem;
  overflow: hidden; }
  .md-typeset .codehilitetable tbody,
  .md-typeset .codehilitetable td {
    display: block;
    padding: 0; }
  .md-typeset .codehilitetable tr {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex; }
  .md-typeset .codehilitetable .codehilite, .md-typeset .codehilitetable .highlight,
  .md-typeset .codehilitetable .linenodiv {
    margin: 0;
    border-radius: 0; }
  .md-typeset .codehilitetable .linenodiv {
    padding: 1.05rem 1.2rem; }
  .md-typeset .codehilitetable .linenos {
    background-color: rgba(0, 0, 0, 0.07);
    color: rgba(0, 0, 0, 0.26);
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none; }
    .md-typeset .codehilitetable .linenos pre {
      margin: 0;
      padding: 0;
      background-color: transparent;
      color: inherit;
      text-align: right; }
  .md-typeset .codehilitetable .code {
    -webkit-box-flex: 1;
        -ms-flex: 1;
            flex: 1;
    overflow: hidden; }

.md-typeset > .codehilitetable {
  -webkit-box-shadow: none;
          box-shadow: none; }

.md-typeset [id^="fnref:"] {
  display: inline-block; }
  .md-typeset [id^="fnref:"]:target {
    margin-top: -7.6rem;
    padding-top: 7.6rem;
    pointer-events: none; }

.md-typeset [id^="fn:"]::before {
  display: none;
  height: 0;
  content: ""; }

.md-typeset [id^="fn:"]:target::before {
  display: block;
  margin-top: -7rem;
  padding-top: 7rem;
  pointer-events: none; }

.md-typeset .footnote {
  color: rgba(0, 0, 0, 0.54);
  font-size: 1.28rem; }
  .md-typeset .footnote ol {
    margin-left: 0; }
  .md-typeset .footnote li {
    -webkit-transition: color 0.25s;
    transition: color 0.25s; }
    .md-typeset .footnote li:target {
      color: rgba(0, 0, 0, 0.87); }
    .md-typeset .footnote li :first-child {
      margin-top: 0; }
    .md-typeset .footnote li:hover .footnote-backref,
    .md-typeset .footnote li:target .footnote-backref {
      -webkit-transform: translateX(0);
              transform: translateX(0);
      opacity: 1; }
    .md-typeset .footnote li:hover .footnote-backref:hover,
    .md-typeset .footnote li:target .footnote-backref {
      color: #536dfe; }

.md-typeset .footnote-ref {
  display: inline-block;
  pointer-events: initial; }
  .md-typeset .footnote-ref::before {
    display: inline;
    margin: 0 0.2em;
    border-left: 0.1rem solid rgba(0, 0, 0, 0.26);
    font-size: 1.25em;
    content: "";
    vertical-align: -0.5rem; }

.md-typeset .footnote-backref {
  display: inline-block;
  -webkit-transform: translateX(0.5rem);
          transform: translateX(0.5rem);
  -webkit-transition: color     0.25s, opacity   0.125s 0.125s, -webkit-transform 0.25s  0.125s;
  transition: color     0.25s, opacity   0.125s 0.125s, -webkit-transform 0.25s  0.125s;
  transition: transform 0.25s  0.125s, color     0.25s, opacity   0.125s 0.125s;
  transition: transform 0.25s  0.125s, color     0.25s, opacity   0.125s 0.125s, -webkit-transform 0.25s  0.125s;
  color: rgba(0, 0, 0, 0.26);
  font-size: 0;
  opacity: 0;
  vertical-align: text-bottom; }
  [dir="rtl"] .md-typeset .footnote-backref {
    -webkit-transform: translateX(-0.5rem);
            transform: translateX(-0.5rem); }
  .md-typeset .footnote-backref::before {
    display: inline-block;
    font-size: 1.6rem;
    content: "\E31B"; }
    [dir="rtl"] .md-typeset .footnote-backref::before {
      -webkit-transform: scaleX(-1);
              transform: scaleX(-1); }

.md-typeset .headerlink {
  display: inline-block;
  margin-left: 1rem;
  -webkit-transform: translate(0, 0.5rem);
          transform: translate(0, 0.5rem);
  -webkit-transition: color     0.25s, opacity   0.125s 0.25s, -webkit-transform 0.25s  0.25s;
  transition: color     0.25s, opacity   0.125s 0.25s, -webkit-transform 0.25s  0.25s;
  transition: transform 0.25s  0.25s, color     0.25s, opacity   0.125s 0.25s;
  transition: transform 0.25s  0.25s, color     0.25s, opacity   0.125s 0.25s, -webkit-transform 0.25s  0.25s;
  opacity: 0; }
  [dir="rtl"] .md-typeset .headerlink {
    margin-right: 1rem;
    margin-left: initial; }
  html body .md-typeset .headerlink {
    color: rgba(0, 0, 0, 0.26); }

.md-typeset h1[id]::before {
  display: block;
  margin-top: -0.9rem;
  padding-top: 0.9rem;
  content: ""; }

.md-typeset h1[id]:target::before {
  margin-top: -6.9rem;
  padding-top: 6.9rem; }

.md-typeset h1[id]:hover .headerlink,
.md-typeset h1[id]:target .headerlink,
.md-typeset h1[id] .headerlink:focus {
  -webkit-transform: translate(0, 0);
          transform: translate(0, 0);
  opacity: 1; }

.md-typeset h1[id]:hover .headerlink:hover,
.md-typeset h1[id]:target .headerlink,
.md-typeset h1[id] .headerlink:focus {
  color: #536dfe; }

.md-typeset h2[id]::before {
  display: block;
  margin-top: -0.8rem;
  padding-top: 0.8rem;
  content: ""; }

.md-typeset h2[id]:target::before {
  margin-top: -6.8rem;
  padding-top: 6.8rem; }

.md-typeset h2[id]:hover .headerlink,
.md-typeset h2[id]:target .headerlink,
.md-typeset h2[id] .headerlink:focus {
  -webkit-transform: translate(0, 0);
          transform: translate(0, 0);
  opacity: 1; }

.md-typeset h2[id]:hover .headerlink:hover,
.md-typeset h2[id]:target .headerlink,
.md-typeset h2[id] .headerlink:focus {
  color: #536dfe; }

.md-typeset h3[id]::before {
  display: block;
  margin-top: -0.9rem;
  padding-top: 0.9rem;
  content: ""; }

.md-typeset h3[id]:target::before {
  margin-top: -6.9rem;
  padding-top: 6.9rem; }

.md-typeset h3[id]:hover .headerlink,
.md-typeset h3[id]:target .headerlink,
.md-typeset h3[id] .headerlink:focus {
  -webkit-transform: translate(0, 0);
          transform: translate(0, 0);
  opacity: 1; }

.md-typeset h3[id]:hover .headerlink:hover,
.md-typeset h3[id]:target .headerlink,
.md-typeset h3[id] .headerlink:focus {
  color: #536dfe; }

.md-typeset h4[id]::before {
  display: block;
  margin-top: -0.9rem;
  padding-top: 0.9rem;
  content: ""; }

.md-typeset h4[id]:target::before {
  margin-top: -6.9rem;
  padding-top: 6.9rem; }

.md-typeset h4[id]:hover .headerlink,
.md-typeset h4[id]:target .headerlink,
.md-typeset h4[id] .headerlink:focus {
  -webkit-transform: translate(0, 0);
          transform: translate(0, 0);
  opacity: 1; }

.md-typeset h4[id]:hover .headerlink:hover,
.md-typeset h4[id]:target .headerlink,
.md-typeset h4[id] .headerlink:focus {
  color: #536dfe; }

.md-typeset h5[id]::before {
  display: block;
  margin-top: -1.1rem;
  padding-top: 1.1rem;
  content: ""; }

.md-typeset h5[id]:target::before {
  margin-top: -7.1rem;
  padding-top: 7.1rem; }

.md-typeset h5[id]:hover .headerlink,
.md-typeset h5[id]:target .headerlink,
.md-typeset h5[id] .headerlink:focus {
  -webkit-transform: translate(0, 0);
          transform: translate(0, 0);
  opacity: 1; }

.md-typeset h5[id]:hover .headerlink:hover,
.md-typeset h5[id]:target .headerlink,
.md-typeset h5[id] .headerlink:focus {
  color: #536dfe; }

.md-typeset h6[id]::before {
  display: block;
  margin-top: -1.1rem;
  padding-top: 1.1rem;
  content: ""; }

.md-typeset h6[id]:target::before {
  margin-top: -7.1rem;
  padding-top: 7.1rem; }

.md-typeset h6[id]:hover .headerlink,
.md-typeset h6[id]:target .headerlink,
.md-typeset h6[id] .headerlink:focus {
  -webkit-transform: translate(0, 0);
          transform: translate(0, 0);
  opacity: 1; }

.md-typeset h6[id]:hover .headerlink:hover,
.md-typeset h6[id]:target .headerlink,
.md-typeset h6[id] .headerlink:focus {
  color: #536dfe; }

.md-typeset .MJXc-display {
  margin: 0.75em 0;
  padding: 0.75em 0;
  overflow: auto;
  -webkit-overflow-scrolling: touch; }

.md-typeset .MathJax_CHTML {
  outline: 0; }

.md-typeset del.critic,
.md-typeset ins.critic,
.md-typeset .critic.comment {
  margin: 0 0.25em;
  padding: 0.0625em 0;
  border-radius: 0.2rem;
  -webkit-box-decoration-break: clone;
          box-decoration-break: clone; }

.md-typeset del.critic {
  background-color: #FFDDDD;
  -webkit-box-shadow: 0.25em 0 0 #FFDDDD, -0.25em 0 0 #FFDDDD;
          box-shadow: 0.25em 0 0 #FFDDDD, -0.25em 0 0 #FFDDDD; }

.md-typeset ins.critic {
  background-color: #DDFFDD;
  -webkit-box-shadow: 0.25em 0 0 #DDFFDD, -0.25em 0 0 #DDFFDD;
          box-shadow: 0.25em 0 0 #DDFFDD, -0.25em 0 0 #DDFFDD; }

.md-typeset .critic.comment {
  background-color: rgba(236, 236, 236, 0.5);
  color: #37474F;
  -webkit-box-shadow: 0.25em 0 0 rgba(236, 236, 236, 0.5), -0.25em 0 0 rgba(236, 236, 236, 0.5);
          box-shadow: 0.25em 0 0 rgba(236, 236, 236, 0.5), -0.25em 0 0 rgba(236, 236, 236, 0.5); }
  .md-typeset .critic.comment::before {
    padding-right: 0.125em;
    color: rgba(0, 0, 0, 0.26);
    content: "\E0B7";
    vertical-align: -0.125em; }

.md-typeset .critic.block {
  display: block;
  margin: 1em 0;
  padding-right: 1.6rem;
  padding-left: 1.6rem;
  -webkit-box-shadow: none;
          box-shadow: none; }
  .md-typeset .critic.block :first-child {
    margin-top: 0.5em; }
  .md-typeset .critic.block :last-child {
    margin-bottom: 0.5em; }

.md-typeset details {
  padding-top: 0; }
  .md-typeset details[open] > summary::after {
    -webkit-transform: rotate(180deg);
            transform: rotate(180deg); }
  .md-typeset details:not([open]) {
    padding-bottom: 0; }
    .md-typeset details:not([open]) > summary {
      border-bottom: none; }
  .md-typeset details summary {
    padding-right: 4rem; }
    [dir="rtl"] .md-typeset details summary {
      padding-left: 4rem; }
  .no-details .md-typeset details:not([open]) > * {
    display: none; }
  .no-details .md-typeset details:not([open]) summary {
    display: block; }

.md-typeset summary {
  display: block;
  outline: none;
  cursor: pointer; }
  .md-typeset summary::-webkit-details-marker {
    display: none; }
  .md-typeset summary::after {
    position: absolute;
    top: 0.8rem;
    right: 1.2rem;
    color: rgba(0, 0, 0, 0.26);
    font-size: 2rem;
    content: "\E313"; }
    [dir="rtl"] .md-typeset summary::after {
      right: initial;
      left: 1.2rem; }

.md-typeset .emojione {
  width: 2rem;
  vertical-align: text-top; }

.md-typeset code.codehilite, .md-typeset code.highlight {
  margin: 0 0.29412em;
  padding: 0.07353em 0; }

.md-typeset .task-list-item {
  position: relative;
  list-style-type: none; }
  .md-typeset .task-list-item [type="checkbox"] {
    position: absolute;
    top: 0.45em;
    left: -2em; }
    [dir="rtl"] .md-typeset .task-list-item [type="checkbox"] {
      right: -2em;
      left: initial; }

.md-typeset .task-list-control .task-list-indicator::before {
  position: absolute;
  top: 0.15em;
  left: -1.25em;
  color: rgba(0, 0, 0, 0.26);
  font-size: 1.25em;
  content: "\E835";
  vertical-align: -0.25em; }
  [dir="rtl"] .md-typeset .task-list-control .task-list-indicator::before {
    right: -1.25em;
    left: initial; }

.md-typeset .task-list-control [type="checkbox"]:checked + .task-list-indicator::before {
  content: "\E834"; }

.md-typeset .task-list-control [type="checkbox"] {
  opacity: 0;
  z-index: -1; }

@media print {
      .md-typeset a::after {
        color: rgba(0, 0, 0, 0.54);
        content: " [" attr(href) "]"; }
      .md-typeset code,
      .md-typeset pre {
        white-space: pre-wrap; }
      .md-typeset code {
        -webkit-box-shadow: none;
                box-shadow: none;
        -webkit-box-decoration-break: initial;
                box-decoration-break: initial; }
    .md-clipboard {
      display: none; }
    .md-content__icon {
      display: none; }
    .md-header {
      display: none; }
  .md-footer {
    display: none; }
    .md-sidebar {
      display: none; }
    .md-tabs {
      display: none; }
    .md-typeset .headerlink {
      display: none; } }

@media only screen and (max-width: 44.9375em) {
      .md-typeset pre {
        margin: 1em -1.6rem;
        border-radius: 0; }
        .md-typeset pre > code {
          padding: 1.05rem 1.6rem; }
        .md-footer-nav__link--prev .md-footer-nav__title {
          display: none; }
      .md-search-result__teaser {
        max-height: 5rem;
        -webkit-line-clamp: 3; }
    .codehilite .hll, .md-typeset .highlight .hll {
      margin: 0 -1.6rem;
      padding: 0 1.6rem; }
  .md-typeset > .codehilite, .md-typeset > .highlight {
    margin: 1em -1.6rem;
    border-radius: 0; }
    .md-typeset > .codehilite pre, .md-typeset > .highlight pre,
    .md-typeset > .codehilite code,
    .md-typeset > .highlight code {
      padding: 1.05rem 1.6rem; }
    .md-typeset > .codehilitetable {
      margin: 1em -1.6rem;
      border-radius: 0; }
      .md-typeset > .codehilitetable .codehilite > pre, .md-typeset > .codehilitetable .highlight > pre,
      .md-typeset > .codehilitetable .codehilite > code, .md-typeset > .codehilitetable .highlight > code,
      .md-typeset > .codehilitetable .linenodiv {
        padding: 1rem 1.6rem; }
  .md-typeset > p > .MJXc-display {
    margin: 0.75em -1.6rem;
    padding: 0.25em 1.6rem; } }

@media only screen and (min-width: 100em) {
    html {
      font-size: 68.75%; } }

@media only screen and (min-width: 125em) {
    html {
      font-size: 75%; } }

@media only screen and (max-width: 59.9375em) {
    body[data-md-state="lock"] {
      overflow: hidden; }
      .ios body[data-md-state="lock"] .md-container {
        display: none; }
    html .md-nav__link[for="toc"] {
      display: block;
      padding-right: 4.8rem; }
      html .md-nav__link[for="toc"]::after {
        color: inherit;
        content: "\E8DE"; }
      html .md-nav__link[for="toc"] + .md-nav__link {
        display: none; }
      html .md-nav__link[for="toc"] ~ .md-nav {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex; }
    html [dir="rtl"] .md-nav__link {
      padding-right: 1.6rem;
      padding-left: 4.8rem; }
    .md-nav__source {
      display: block;
      padding: 0 0.4rem;
      background-color: rgba(50, 64, 144, 0.9675);
      color: white; }
    .md-search__overlay {
      position: absolute;
      top: 0.4rem;
      left: 0.4rem;
      width: 3.6rem;
      height: 3.6rem;
      -webkit-transform-origin: center;
              transform-origin: center;
      -webkit-transition: opacity   0.2s 0.2s, -webkit-transform 0.3s 0.1s;
      transition: opacity   0.2s 0.2s, -webkit-transform 0.3s 0.1s;
      transition: transform 0.3s 0.1s, opacity   0.2s 0.2s;
      transition: transform 0.3s 0.1s, opacity   0.2s 0.2s, -webkit-transform 0.3s 0.1s;
      border-radius: 2rem;
      background-color: white;
      overflow: hidden;
      pointer-events: none; }
      [dir="rtl"] .md-search__overlay {
        right: 0.4rem;
        left: initial; }
      [data-md-toggle="search"]:checked ~ .md-header .md-search__overlay {
        -webkit-transition: opacity   0.1s, -webkit-transform 0.4s;
        transition: opacity   0.1s, -webkit-transform 0.4s;
        transition: transform 0.4s, opacity   0.1s;
        transition: transform 0.4s, opacity   0.1s, -webkit-transform 0.4s;
        opacity: 1; }
  .md-search__inner {
    position: fixed;
    top: 0;
    left: 100%;
    width: 100%;
    height: 100%;
    -webkit-transform: translateX(5%);
            transform: translateX(5%);
    -webkit-transition: right 0s 0.3s, left 0s 0.3s, opacity 0.15s 0.15s, -webkit-transform 0.15s 0.15s cubic-bezier(0.4, 0, 0.2, 1);
    transition: right 0s 0.3s, left 0s 0.3s, opacity 0.15s 0.15s, -webkit-transform 0.15s 0.15s cubic-bezier(0.4, 0, 0.2, 1);
    transition: right 0s 0.3s, left 0s 0.3s, transform 0.15s 0.15s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.15s 0.15s;
    transition: right 0s 0.3s, left 0s 0.3s, transform 0.15s 0.15s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.15s 0.15s, -webkit-transform 0.15s 0.15s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    z-index: 2; }
    [data-md-toggle="search"]:checked ~ .md-header .md-search__inner {
      left: 0;
      -webkit-transform: translateX(0);
              transform: translateX(0);
      -webkit-transition: right 0s 0s, left 0s 0s, opacity 0.15s 0.15s, -webkit-transform 0.15s 0.15s cubic-bezier(0.1, 0.7, 0.1, 1);
      transition: right 0s 0s, left 0s 0s, opacity 0.15s 0.15s, -webkit-transform 0.15s 0.15s cubic-bezier(0.1, 0.7, 0.1, 1);
      transition: right 0s 0s, left 0s 0s, transform 0.15s 0.15s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s 0.15s;
      transition: right 0s 0s, left 0s 0s, transform 0.15s 0.15s cubic-bezier(0.1, 0.7, 0.1, 1), opacity 0.15s 0.15s, -webkit-transform 0.15s 0.15s cubic-bezier(0.1, 0.7, 0.1, 1);
      opacity: 1; }
      [dir="rtl"] [data-md-toggle="search"]:checked ~ .md-header .md-search__inner {
        right: 0;
        left: initial; }
    html [dir="rtl"] .md-search__inner {
      right: 100%;
      left: initial;
      -webkit-transform: translateX(-5%);
              transform: translateX(-5%); }
    .md-search__input {
      width: 100%;
      height: 4.8rem;
      font-size: 1.8rem; }
      .md-search__icon[for="search"] {
        top: 1.2rem;
        left: 1.6rem; }
        .md-search__icon[for="search"][for="search"]::before {
          content: "\E5C4"; }
          [dir="rtl"] .md-search__icon[for="search"][for="search"]::before {
            content: "\E5C8"; }
      .md-search__icon[type="reset"] {
        top: 1.2rem;
        right: 1.6rem; }
    .md-search__output {
      top: 4.8rem;
      bottom: 0; }
        .md-search-result__article--document::before {
          display: none; } }

@media only screen and (max-width: 76.1875em) {
    [data-md-toggle="drawer"]:checked ~ .md-overlay {
      width: 100%;
      height: 100%;
      -webkit-transition: width   0s, height  0s, opacity 0.25s;
      transition: width   0s, height  0s, opacity 0.25s;
      opacity: 1; }
      .md-header-nav__button.md-icon--home, .md-header-nav__button.md-logo {
        display: none; }
      .md-hero__inner {
        margin-top: 4.8rem;
        margin-bottom: 2.4rem; }
    .md-nav {
      background-color: white; }
      .md-nav--primary,
      .md-nav--primary .md-nav {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        position: absolute;
        top: 0;
        right: 0;
        left: 0;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
            -ms-flex-direction: column;
                flex-direction: column;
        height: 100%;
        z-index: 1; }
      .md-nav--primary .md-nav__title,
      .md-nav--primary .md-nav__item {
        font-size: 1.6rem;
        line-height: 1.5; }
      html .md-nav--primary .md-nav__title {
        position: relative;
        height: 11.2rem;
        padding: 6rem 1.6rem 0.4rem;
        background-color: rgba(0, 0, 0, 0.07);
        color: rgba(0, 0, 0, 0.54);
        font-weight: 400;
        line-height: 4.8rem;
        white-space: nowrap;
        cursor: pointer; }
        html .md-nav--primary .md-nav__title::before {
          display: block;
          position: absolute;
          top: 0.4rem;
          left: 0.4rem;
          width: 4rem;
          height: 4rem;
          color: rgba(0, 0, 0, 0.54); }
        html .md-nav--primary .md-nav__title ~ .md-nav__list {
          background-color: white;
          -webkit-box-shadow: 0 0.1rem 0 rgba(0, 0, 0, 0.07) inset;
                  box-shadow: 0 0.1rem 0 rgba(0, 0, 0, 0.07) inset; }
          html .md-nav--primary .md-nav__title ~ .md-nav__list > .md-nav__item:first-child {
            border-top: 0; }
        html .md-nav--primary .md-nav__title--site {
          position: relative;
          background-color: #3f51b5;
          color: white; }
          html .md-nav--primary .md-nav__title--site .md-nav__button {
            display: block;
            position: absolute;
            top: 0.4rem;
            left: 0.4rem;
            width: 6.4rem;
            height: 6.4rem;
            font-size: 4.8rem; }
          html .md-nav--primary .md-nav__title--site::before {
            display: none; }
      html [dir="rtl"] .md-nav--primary .md-nav__title::before {
        right: 0.4rem;
        left: initial; }
      html [dir="rtl"] .md-nav--primary .md-nav__title--site .md-nav__button {
        right: 0.4rem;
        left: initial; }
      .md-nav--primary .md-nav__list {
        -webkit-box-flex: 1;
            -ms-flex: 1;
                flex: 1;
        overflow-y: auto; }
      .md-nav--primary .md-nav__item {
        padding: 0;
        border-top: 0.1rem solid rgba(0, 0, 0, 0.07); }
        [dir="rtl"] .md-nav--primary .md-nav__item {
          padding: 0; }
        .md-nav--primary .md-nav__item--nested > .md-nav__link {
          padding-right: 4.8rem; }
          [dir="rtl"] .md-nav--primary .md-nav__item--nested > .md-nav__link {
            padding-right: 1.6rem;
            padding-left: 4.8rem; }
          .md-nav--primary .md-nav__item--nested > .md-nav__link::after {
            content: "\E315"; }
            [dir="rtl"] .md-nav--primary .md-nav__item--nested > .md-nav__link::after {
              content: "\E314"; }
      .md-nav--primary .md-nav__link {
        position: relative;
        margin-top: 0;
        padding: 1.2rem 1.6rem; }
        .md-nav--primary .md-nav__link::after {
          position: absolute;
          top: 50%;
          right: 1.2rem;
          margin-top: -1.2rem;
          color: inherit;
          font-size: 2.4rem; }
          [dir="rtl"] .md-nav--primary .md-nav__link::after {
            right: initial;
            left: 1.2rem; }
      .md-nav--primary .md-nav--secondary .md-nav__link {
        position: static; }
      .md-nav--primary .md-nav--secondary .md-nav {
        position: static;
        background-color: transparent; }
        .md-nav--primary .md-nav--secondary .md-nav .md-nav__link {
          padding-left: 2.8rem; }
          [dir="rtl"] .md-nav--primary .md-nav--secondary .md-nav .md-nav__link {
            padding-right: 2.8rem;
            padding-left: initial; }
        .md-nav--primary .md-nav--secondary .md-nav .md-nav .md-nav__link {
          padding-left: 4rem; }
          [dir="rtl"] .md-nav--primary .md-nav--secondary .md-nav .md-nav .md-nav__link {
            padding-right: 4rem;
            padding-left: initial; }
        .md-nav--primary .md-nav--secondary .md-nav .md-nav .md-nav .md-nav__link {
          padding-left: 5.2rem; }
          [dir="rtl"] .md-nav--primary .md-nav--secondary .md-nav .md-nav .md-nav .md-nav__link {
            padding-right: 5.2rem;
            padding-left: initial; }
        .md-nav--primary .md-nav--secondary .md-nav .md-nav .md-nav .md-nav .md-nav__link {
          padding-left: 6.4rem; }
          [dir="rtl"] .md-nav--primary .md-nav--secondary .md-nav .md-nav .md-nav .md-nav .md-nav__link {
            padding-right: 6.4rem;
            padding-left: initial; }
      .md-nav__toggle ~ .md-nav {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-transform: translateX(100%);
                transform: translateX(100%);
        -webkit-transition: opacity 0.125s 0.05s, -webkit-transform 0.25s cubic-bezier(0.8, 0, 0.6, 1);
        transition: opacity 0.125s 0.05s, -webkit-transform 0.25s cubic-bezier(0.8, 0, 0.6, 1);
        transition: transform 0.25s cubic-bezier(0.8, 0, 0.6, 1), opacity 0.125s 0.05s;
        transition: transform 0.25s cubic-bezier(0.8, 0, 0.6, 1), opacity 0.125s 0.05s, -webkit-transform 0.25s cubic-bezier(0.8, 0, 0.6, 1);
        opacity: 0; }
        [dir="rtl"] .md-nav__toggle ~ .md-nav {
          -webkit-transform: translateX(-100%);
                  transform: translateX(-100%); }
        .no-csstransforms3d .md-nav__toggle ~ .md-nav {
          display: none; }
      .md-nav__toggle:checked ~ .md-nav {
        -webkit-transform: translateX(0);
                transform: translateX(0);
        -webkit-transition: opacity 0.125s 0.125s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
        transition: opacity 0.125s 0.125s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
        transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.125s 0.125s;
        transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.125s 0.125s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1);
        opacity: 1; }
        .no-csstransforms3d .md-nav__toggle:checked ~ .md-nav {
          display: -webkit-box;
          display: -ms-flexbox;
          display: flex; }
    .md-sidebar--primary {
      position: fixed;
      top: 0;
      left: -24.2rem;
      width: 24.2rem;
      height: 100%;
      -webkit-transform: translateX(0);
              transform: translateX(0);
      -webkit-transition: -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 0.25s;
      transition: -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 0.25s;
      transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.25s;
      transition: transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.25s, -webkit-transform 0.25s cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 0.25s;
      background-color: white;
      z-index: 3; }
      [dir="rtl"] .md-sidebar--primary {
        right: -24.2rem;
        left: initial; }
      .no-csstransforms3d .md-sidebar--primary {
        display: none; }
      [data-md-toggle="drawer"]:checked ~ .md-container .md-sidebar--primary {
        -webkit-box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.4);
                box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.4);
        -webkit-transform: translateX(24.2rem);
                transform: translateX(24.2rem); }
        [dir="rtl"] [data-md-toggle="drawer"]:checked ~ .md-container .md-sidebar--primary {
          -webkit-transform: translateX(-24.2rem);
                  transform: translateX(-24.2rem); }
        .no-csstransforms3d [data-md-toggle="drawer"]:checked ~ .md-container .md-sidebar--primary {
          display: block; }
      .md-sidebar--primary .md-sidebar__scrollwrap {
        overflow: hidden; }
      .md-sidebar--primary .md-sidebar__scrollwrap {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        margin: 0; }
    .md-tabs {
      display: none; } }

@media only screen and (min-width: 60em) {
  .md-content {
    margin-right: 24.2rem; }
    [dir="rtl"] .md-content {
      margin-right: initial;
      margin-left: 24.2rem; }
      .md-header-nav__button.md-icon--search {
        display: none; }
      .md-header-nav__source {
        display: block;
        width: 23rem;
        max-width: 23rem;
        margin-left: 2.8rem;
        padding-right: 1.2rem; }
        [dir="rtl"] .md-header-nav__source {
          margin-right: 2.8rem;
          margin-left: initial;
          padding-right: initial;
          padding-left: 1.2rem; }
  .md-search {
    padding: 0.4rem; }
    .md-search__overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 0;
      height: 0;
      -webkit-transition: width   0s 0.25s, height  0s 0.25s, opacity 0.25s;
      transition: width   0s 0.25s, height  0s 0.25s, opacity 0.25s;
      background-color: rgba(0, 0, 0, 0.54);
      cursor: pointer; }
      [dir="rtl"] .md-search__overlay {
        right: 0;
        left: initial; }
      [data-md-toggle="search"]:checked ~ .md-header .md-search__overlay {
        width: 100%;
        height: 100%;
        -webkit-transition: width   0s, height  0s, opacity 0.25s;
        transition: width   0s, height  0s, opacity 0.25s;
        opacity: 1; }
  .md-search__inner {
    position: relative;
    width: 23rem;
    padding: 0.2rem 0;
    float: right;
    -webkit-transition: width 0.25s cubic-bezier(0.1, 0.7, 0.1, 1);
    transition: width 0.25s cubic-bezier(0.1, 0.7, 0.1, 1); }
    [dir="rtl"] .md-search__inner {
      float: left; }
    .md-search__form {
      border-radius: 0.2rem; }
    .md-search__input {
      width: 100%;
      height: 3.6rem;
      padding-left: 4.4rem;
      -webkit-transition: background-color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1), color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1);
      transition: background-color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1), color 0.25s cubic-bezier(0.1, 0.7, 0.1, 1);
      border-radius: 0.2rem;
      background-color: rgba(0, 0, 0, 0.26);
      color: inherit;
      font-size: 1.6rem; }
      [dir="rtl"] .md-search__input {
        padding-right: 4.4rem; }
      .md-search__input + .md-search__icon {
        color: inherit; }
      .md-search__input::-webkit-input-placeholder {
        color: rgba(255, 255, 255, 0.7); }
      .md-search__input:-ms-input-placeholder {
        color: rgba(255, 255, 255, 0.7); }
      .md-search__input::-ms-input-placeholder {
        color: rgba(255, 255, 255, 0.7); }
      .md-search__input::placeholder {
        color: rgba(255, 255, 255, 0.7); }
      .md-search__input:hover {
        background-color: rgba(255, 255, 255, 0.12); }
      [data-md-toggle="search"]:checked ~ .md-header .md-search__input {
        border-radius: 0.2rem 0.2rem 0 0;
        background-color: white;
        color: rgba(0, 0, 0, 0.87);
        text-overflow: none; }
        [data-md-toggle="search"]:checked ~ .md-header .md-search__input + .md-search__icon, [data-md-toggle="search"]:checked ~ .md-header .md-search__input::-webkit-input-placeholder {
          color: rgba(0, 0, 0, 0.54); }
        [data-md-toggle="search"]:checked ~ .md-header .md-search__input + .md-search__icon, [data-md-toggle="search"]:checked ~ .md-header .md-search__input:-ms-input-placeholder {
          color: rgba(0, 0, 0, 0.54); }
        [data-md-toggle="search"]:checked ~ .md-header .md-search__input + .md-search__icon, [data-md-toggle="search"]:checked ~ .md-header .md-search__input::-ms-input-placeholder {
          color: rgba(0, 0, 0, 0.54); }
        [data-md-toggle="search"]:checked ~ .md-header .md-search__input + .md-search__icon, [data-md-toggle="search"]:checked ~ .md-header .md-search__input::placeholder {
          color: rgba(0, 0, 0, 0.54); }
    .md-search__output {
      top: 3.8rem;
      -webkit-transition: opacity 0.4s;
      transition: opacity 0.4s;
      opacity: 0; }
      [data-md-toggle="search"]:checked ~ .md-header .md-search__output {
        -webkit-box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.4);
                box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.4);
        opacity: 1; }
    .md-search__scrollwrap {
      max-height: 0; }
      [data-md-toggle="search"]:checked ~ .md-header .md-search__scrollwrap {
        max-height: 75vh; }
      .md-search__scrollwrap::-webkit-scrollbar {
        width: 0.4rem;
        height: 0.4rem; }
      .md-search__scrollwrap::-webkit-scrollbar-thumb {
        background-color: rgba(0, 0, 0, 0.26); }
        .md-search__scrollwrap::-webkit-scrollbar-thumb:hover {
          background-color: #536dfe; }
      .md-search-result__meta {
        padding-left: 4.4rem; }
        [dir="rtl"] .md-search-result__meta {
          padding-right: 4.4rem;
          padding-left: initial; }
      .md-search-result__article {
        padding-left: 4.4rem; }
        [dir="rtl"] .md-search-result__article {
          padding-right: 4.4rem;
          padding-left: 1.6rem; }
      .md-sidebar--secondary {
        display: block;
        margin-left: 100%;
        -webkit-transform: translate(-100%, 0);
                transform: translate(-100%, 0); }
        [dir="rtl"] .md-sidebar--secondary {
          margin-right: 100%;
          margin-left: initial;
          -webkit-transform: translate(100%, 0);
                  transform: translate(100%, 0); } }

@media only screen and (min-width: 76.25em) {
  .md-content {
    margin-left: 24.2rem; }
    [dir="rtl"] .md-content {
      margin-right: 24.2rem; }
    .md-content__inner {
      margin-right: 2.4rem;
      margin-left: 2.4rem; }
      .md-header-nav__button.md-icon--menu {
        display: none; }
    .md-nav[data-md-state="animate"] {
      -webkit-transition: max-height 0.25s cubic-bezier(0.86, 0, 0.07, 1);
      transition: max-height 0.25s cubic-bezier(0.86, 0, 0.07, 1); }
    .md-nav__toggle ~ .md-nav {
      max-height: 0;
      overflow: hidden; }
      .no-js .md-nav__toggle ~ .md-nav {
        display: none; }
    .md-nav__toggle:checked ~ .md-nav, .md-nav[data-md-state="expand"] {
      max-height: 100%; }
      .no-js .md-nav__toggle:checked ~ .md-nav, .no-js .md-nav[data-md-state="expand"] {
        display: block; }
    .md-nav__item--nested > .md-nav > .md-nav__title {
      display: none; }
    .md-nav__item--nested > .md-nav__link::after {
      display: inline-block;
      -webkit-transform-origin: 0.45em 0.45em;
              transform-origin: 0.45em 0.45em;
      -webkit-transform-style: preserve-3d;
              transform-style: preserve-3d;
      vertical-align: -0.125em; }
      .js .md-nav__item--nested > .md-nav__link::after {
        -webkit-transition: -webkit-transform 0.4s;
        transition: -webkit-transform 0.4s;
        transition: transform 0.4s;
        transition: transform 0.4s, -webkit-transform 0.4s; }
    .md-nav__item--nested .md-nav__toggle:checked ~ .md-nav__link::after {
      -webkit-transform: rotateX(180deg);
              transform: rotateX(180deg); }
  [data-md-toggle="search"]:checked ~ .md-header .md-search__inner {
    width: 68.8rem; }
    .md-search__scrollwrap {
      width: 68.8rem; }
      .md-sidebar--secondary {
        margin-left: 122rem; }
        [dir="rtl"] .md-sidebar--secondary {
          margin-right: 122rem;
          margin-left: initial; }
    .md-tabs ~ .md-main .md-nav--primary > .md-nav__list > .md-nav__item--nested {
      font-size: 0;
      visibility: hidden; }
    .md-tabs--active ~ .md-main .md-nav--primary .md-nav__title {
      display: block;
      padding: 0; }
    .md-tabs--active ~ .md-main .md-nav--primary .md-nav__title--site {
      display: none; }
    .md-tabs--active ~ .md-main .md-nav--primary > .md-nav__list > .md-nav__item {
      font-size: 0;
      visibility: hidden; }
      .md-tabs--active ~ .md-main .md-nav--primary > .md-nav__list > .md-nav__item--nested {
        display: none;
        font-size: 1.4rem;
        overflow: auto;
        visibility: visible; }
        .md-tabs--active ~ .md-main .md-nav--primary > .md-nav__list > .md-nav__item--nested > .md-nav__link {
          display: none; }
      .md-tabs--active ~ .md-main .md-nav--primary > .md-nav__list > .md-nav__item--active {
        display: block; }
    .md-tabs--active ~ .md-main .md-nav[data-md-level="1"] {
      max-height: initial;
      overflow: visible; }
      .md-tabs--active ~ .md-main .md-nav[data-md-level="1"] > .md-nav__list > .md-nav__item {
        padding-left: 0; }
      .md-tabs--active ~ .md-main .md-nav[data-md-level="1"] .md-nav .md-nav__title {
        display: none; } }

@media only screen and (min-width: 45em) {
      .md-footer-nav__link {
        width: 50%; }
    .md-footer-copyright {
      max-width: 75%;
      float: left; }
      [dir="rtl"] .md-footer-copyright {
        float: right; }
    .md-footer-social {
      padding: 1.2rem 0;
      float: right; }
      [dir="rtl"] .md-footer-social {
        float: left; } }

@media only screen and (max-width: 29.9375em) {
    [data-md-toggle="search"]:checked ~ .md-header .md-search__overlay {
      -webkit-transform: scale(45);
              transform: scale(45); } }

@media only screen and (min-width: 30em) and (max-width: 44.9375em) {
    [data-md-toggle="search"]:checked ~ .md-header .md-search__overlay {
      -webkit-transform: scale(60);
              transform: scale(60); } }

@media only screen and (min-width: 45em) and (max-width: 59.9375em) {
    [data-md-toggle="search"]:checked ~ .md-header .md-search__overlay {
      -webkit-transform: scale(75);
              transform: scale(75); } }

@media only screen and (min-width: 60em) and (max-width: 76.1875em) {
  [data-md-toggle="search"]:checked ~ .md-header .md-search__inner {
    width: 46.8rem; }
    .md-search__scrollwrap {
      width: 46.8rem; }
      .md-search-result__teaser {
        max-height: 5rem;
        -webkit-line-clamp: 3; } }

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/