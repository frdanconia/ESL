(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ({

/***/ 4:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(5);

/***/ }),

/***/ 5:
/***/ (function(module, exports) {

;(function(window){
/*! modernizr 3.5.0 (Custom Build) | MIT *
 * https://modernizr.com/download/?-checked-csstransforms3d-dataset-details-fetch-json-svg-target-addtest-setclasses !*/
!function(e,t,n){function r(e,t){return typeof e===t}function i(){var e,t,n,i,o,s,a;for(var l in w)if(w.hasOwnProperty(l)){if(e=[],t=w[l],t.name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(i=r(t.fn,"function")?t.fn():t.fn,o=0;o<e.length;o++)s=e[o],a=s.split("."),1===a.length?Modernizr[a[0]]=i:(!Modernizr[a[0]]||Modernizr[a[0]]instanceof Boolean||(Modernizr[a[0]]=new Boolean(Modernizr[a[0]])),Modernizr[a[0]][a[1]]=i),b.push((i?"":"no-")+a.join("-"))}}function o(e){var t=x.className,n=Modernizr._config.classPrefix||"";if(T&&(t=t.baseVal),Modernizr._config.enableJSClass){var r=new RegExp("(^|\\s)"+n+"no-js(\\s|$)");t=t.replace(r,"$1"+n+"js$2")}Modernizr._config.enableClasses&&(t+=" "+n+e.join(" "+n),T?x.className.baseVal=t:x.className=t)}function s(e,t){if("object"==typeof e)for(var n in e)_(e,n)&&s(n,e[n]);else{e=e.toLowerCase();var r=e.split("."),i=Modernizr[r[0]];if(2==r.length&&(i=i[r[1]]),"undefined"!=typeof i)return Modernizr;t="function"==typeof t?t():t,1==r.length?Modernizr[r[0]]=t:(!Modernizr[r[0]]||Modernizr[r[0]]instanceof Boolean||(Modernizr[r[0]]=new Boolean(Modernizr[r[0]])),Modernizr[r[0]][r[1]]=t),o([(t&&0!=t?"":"no-")+r.join("-")]),Modernizr._trigger(e,t)}return Modernizr}function a(){return"function"!=typeof t.createElement?t.createElement(arguments[0]):T?t.createElementNS.call(t,"http://www.w3.org/2000/svg",arguments[0]):t.createElement.apply(t,arguments)}function l(){var e=t.body;return e||(e=a(T?"svg":"body"),e.fake=!0),e}function u(e,n,r,i){var o,s,u,f,d="modernizr",c=a("div"),p=l();if(parseInt(r,10))for(;r--;)u=a("div"),u.id=i?i[r]:d+(r+1),c.appendChild(u);return o=a("style"),o.type="text/css",o.id="s"+d,(p.fake?p:c).appendChild(o),p.appendChild(c),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(t.createTextNode(e)),c.id=d,p.fake&&(p.style.background="",p.style.overflow="hidden",f=x.style.overflow,x.style.overflow="hidden",x.appendChild(p)),s=n(c,e),p.fake?(p.parentNode.removeChild(p),x.style.overflow=f,x.offsetHeight):c.parentNode.removeChild(c),!!s}function f(e,t){return!!~(""+e).indexOf(t)}function d(e){return e.replace(/([A-Z])/g,function(e,t){return"-"+t.toLowerCase()}).replace(/^ms-/,"-ms-")}function c(t,n,r){var i;if("getComputedStyle"in e){i=getComputedStyle.call(e,t,n);var o=e.console;if(null!==i)r&&(i=i.getPropertyValue(r));else if(o){var s=o.error?"error":"log";o[s].call(o,"getComputedStyle returning null, its possible modernizr test results are inaccurate")}}else i=!n&&t.currentStyle&&t.currentStyle[r];return i}function p(t,r){var i=t.length;if("CSS"in e&&"supports"in e.CSS){for(;i--;)if(e.CSS.supports(d(t[i]),r))return!0;return!1}if("CSSSupportsRule"in e){for(var o=[];i--;)o.push("("+d(t[i])+":"+r+")");return o=o.join(" or "),u("@supports ("+o+") { #modernizr { position: absolute; } }",function(e){return"absolute"==c(e,null,"position")})}return n}function h(e){return e.replace(/([a-z])-([a-z])/g,function(e,t,n){return t+n.toUpperCase()}).replace(/^-/,"")}function m(e,t,i,o){function s(){u&&(delete E.style,delete E.modElem)}if(o=r(o,"undefined")?!1:o,!r(i,"undefined")){var l=p(e,i);if(!r(l,"undefined"))return l}for(var u,d,c,m,g,v=["modernizr","tspan","samp"];!E.style&&v.length;)u=!0,E.modElem=a(v.shift()),E.style=E.modElem.style;for(c=e.length,d=0;c>d;d++)if(m=e[d],g=E.style[m],f(m,"-")&&(m=h(m)),E.style[m]!==n){if(o||r(i,"undefined"))return s(),"pfx"==t?m:!0;try{E.style[m]=i}catch(y){}if(E.style[m]!=g)return s(),"pfx"==t?m:!0}return s(),!1}function g(e,t){return function(){return e.apply(t,arguments)}}function v(e,t,n){var i;for(var o in e)if(e[o]in t)return n===!1?e[o]:(i=t[e[o]],r(i,"function")?g(i,n||t):i);return!1}function y(e,t,n,i,o){var s=e.charAt(0).toUpperCase()+e.slice(1),a=(e+" "+P.join(s+" ")+s).split(" ");return r(t,"string")||r(t,"undefined")?m(a,t,i,o):(a=(e+" "+A.join(s+" ")+s).split(" "),v(a,t,n))}function S(e,t,r){return y(e,n,n,t,r)}var w=[],C={_version:"3.5.0",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){w.push({name:e,fn:t,options:n})},addAsyncTest:function(e){w.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=C,Modernizr=new Modernizr;var _,b=[],x=t.documentElement,T="svg"===x.nodeName.toLowerCase();!function(){var e={}.hasOwnProperty;_=r(e,"undefined")||r(e.call,"undefined")?function(e,t){return t in e&&r(e.constructor.prototype[t],"undefined")}:function(t,n){return e.call(t,n)}}(),C._l={},C.on=function(e,t){this._l[e]||(this._l[e]=[]),this._l[e].push(t),Modernizr.hasOwnProperty(e)&&setTimeout(function(){Modernizr._trigger(e,Modernizr[e])},0)},C._trigger=function(e,t){if(this._l[e]){var n=this._l[e];setTimeout(function(){var e,r;for(e=0;e<n.length;e++)(r=n[e])(t)},0),delete this._l[e]}},Modernizr._q.push(function(){C.addTest=s}),Modernizr.addTest("json","JSON"in e&&"parse"in JSON&&"stringify"in JSON),Modernizr.addTest("svg",!!t.createElementNS&&!!t.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect);var z=C.testStyles=u;Modernizr.addTest("checked",function(){return z("#modernizr {position:absolute} #modernizr input {margin-left:10px} #modernizr :checked {margin-left:20px;display:block}",function(e){var t=a("input");return t.setAttribute("type","checkbox"),t.setAttribute("checked","checked"),e.appendChild(t),20===t.offsetLeft})}),Modernizr.addTest("target",function(){var t=e.document;if(!("querySelectorAll"in t))return!1;try{return t.querySelectorAll(":target"),!0}catch(n){return!1}}),Modernizr.addTest("dataset",function(){var e=a("div");return e.setAttribute("data-a-b","c"),!(!e.dataset||"c"!==e.dataset.aB)}),Modernizr.addTest("details",function(){var e,t=a("details");return"open"in t?(z("#modernizr details{display:block}",function(n){n.appendChild(t),t.innerHTML="<summary>a</summary>b",e=t.offsetHeight,t.open=!0,e=e!=t.offsetHeight}),e):!1}),Modernizr.addTest("fetch","fetch"in e);var k="Moz O ms Webkit",P=C._config.usePrefixes?k.split(" "):[];C._cssomPrefixes=P;var N={elem:a("modernizr")};Modernizr._q.push(function(){delete N.elem});var E={style:N.elem.style};Modernizr._q.unshift(function(){delete E.style});var A=C._config.usePrefixes?k.toLowerCase().split(" "):[];C._domPrefixes=A,C.testAllProps=y,C.testAllProps=S;var j="CSS"in e&&"supports"in e.CSS,O="supportsCSS"in e;Modernizr.addTest("supports",j||O),Modernizr.addTest("csstransforms3d",function(){var e=!!S("perspective","1px",!0),t=Modernizr._config.usePrefixes;if(e&&(!t||"webkitPerspective"in x.style)){var n,r="#modernizr{width:0;height:0}";Modernizr.supports?n="@supports (perspective: 1px)":(n="@media (transform-3d)",t&&(n+=",(-webkit-transform-3d)")),n+="{#modernizr{width:7px;height:18px;margin:0;padding:0;border:0}}",z(r+n,function(t){e=7===t.offsetWidth&&18===t.offsetHeight})}return e}),i(),o(b),delete C.addTest,delete C.addAsyncTest;for(var q=0;q<Modernizr._q.length;q++)Modernizr._q[q]();e.Modernizr=Modernizr}(window,document);
module.exports = window.Modernizr;
})(window);

/***/ })

/******/ })));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYmFhMzc3YWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9qYXZhc2NyaXB0cy9tb2Rlcm5penIuanMiLCJ3ZWJwYWNrOi8vLy4vLm1vZGVybml6ci1hdXRvcmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZDQSx1Qjs7Ozs7OztBQ3RCQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0Isb0JBQW9CLGFBQWEsa0JBQWtCLHVDQUF1QyxxSEFBcUgsMkJBQTJCLCtDQUErQyx5Q0FBeUMsV0FBVyx5TkFBeU4sY0FBYyxzREFBc0QscURBQXFELDZDQUE2Qyw2QkFBNkIsZ0dBQWdHLGdCQUFnQix1REFBdUQsS0FBSyxrQkFBa0IscUNBQXFDLG1FQUFtRSxxUEFBcVAsaUJBQWlCLGFBQWEsZ0xBQWdMLGFBQWEsYUFBYSw0Q0FBNEMsb0JBQW9CLDJDQUEyQyx1QkFBdUIsSUFBSSxpREFBaUQsb1pBQW9aLGdCQUFnQiwyQkFBMkIsY0FBYywwQ0FBMEMsMEJBQTBCLHlCQUF5QixrQkFBa0IsTUFBTSwyQkFBMkIsK0JBQStCLGdCQUFnQix5Q0FBeUMsV0FBVyw0QkFBNEIsb0dBQW9HLDZDQUE2QyxTQUFTLGdCQUFnQixlQUFlLGtDQUFrQyxLQUFLLElBQUksdUNBQXVDLFNBQVMsMEJBQTBCLGFBQWEsSUFBSSwrQkFBK0IsOENBQThDLGFBQWEsb0JBQW9CLEVBQUUsRUFBRSxjQUFjLHVDQUF1QyxFQUFFLFNBQVMsY0FBYyxvREFBb0QseUJBQXlCLG1CQUFtQixvQkFBb0IsYUFBYSxxQ0FBcUMsOENBQThDLGFBQWEsOEJBQThCLGlEQUFpRCxtQkFBbUIscURBQXFELG1CQUFtQixJQUFJLDhEQUE4RCxnREFBZ0QsSUFBSSxhQUFhLFVBQVUsMENBQTBDLGNBQWMsZ0JBQWdCLGtCQUFrQiw2QkFBNkIsa0JBQWtCLE1BQU0sc0ZBQXNGLFNBQVMsc0JBQXNCLGdGQUFnRixrR0FBa0csa0JBQWtCLG9CQUFvQixZQUFZLDBCQUEwQixnRUFBZ0Usd0JBQXdCLFdBQVcsc0JBQXNCLFFBQVEsSUFBSSx5QkFBeUIsUUFBUSxzQkFBc0IsRUFBRSwwQkFBMEIsUUFBUSxlQUFlLEdBQUcsd0JBQXdCLDhDQUE4QyxrRUFBa0UsWUFBWSxRQUFRLGdCQUFnQix3REFBd0QseURBQXlELGVBQWUsb0JBQW9CLFVBQVUsb0JBQW9CLGtHQUFrRyxtQ0FBbUMsSUFBSSwwQkFBMEIsZUFBZSxpQkFBaUIsc0JBQXNCLFFBQVEsUUFBUSxXQUFXLGdCQUFnQix1QkFBdUIsOEJBQThCLFlBQVksK0xBQStMLHFCQUFxQix1Q0FBdUMsc0JBQXNCLGtCQUFrQixtQkFBbUIsaUJBQWlCLHNCQUFzQixpQkFBaUIsY0FBYyxjQUFjLGlCQUFpQixnSEFBZ0gsRUFBRSx3Q0FBd0MsaUJBQWlCLHNDQUFzQyxJQUFJLHdDQUF3QyxTQUFTLFVBQVUseUNBQXlDLGVBQWUsd0VBQXdFLHlDQUF5QyxxQkFBcUIsd0NBQXdDLGNBQWMsY0FBYyxvR0FBb0csUUFBUSx5Q0FBeUMsZ0VBQWdFLG1CQUFtQixPQUFPLHFCQUFxQiw2QkFBNkIsY0FBYyxFQUFFLE9BQU8sb0JBQW9CLGdDQUFnQyxlQUFlLEVBQUUsMERBQTBELG1EQUFtRCx3REFBd0Qsa0ZBQWtGLGtFQUFrRSwyQ0FBMkMsb0JBQW9CLFFBQVEsU0FBUyxFQUFFLHVIQUF1SCxXQUFXLFVBQVUsWUFBWSxTQUFTLFVBQVUsVUFBVSxvQkFBb0IseUNBQXlDLEVBQUUsU0FBUyxrREFBa0QsWUFBWSxzQkFBc0Isc0JBQXNCLHNCQUFzQjtBQUNoNE47QUFDQSxDQUFDLFUiLCJmaWxlIjoiYXNzZXRzL2phdmFzY3JpcHRzL21vZGVybml6ci5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGJhYTM3N2FmIiwiLypcclxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTggTWFydGluIERvbmF0aCA8bWFydGluLmRvbmF0aEBzcXVpZGZ1bmsuY29tPlxyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvXHJcbiAqIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXHJcbiAqIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxyXG4gKiBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTi1JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXHJcbiAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1NcclxuICogSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxuXHJcbmltcG9ydCBcIi4uLy4uLy4uLy5tb2Rlcm5penItYXV0b3JjXCJcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Fzc2V0cy9qYXZhc2NyaXB0cy9tb2Rlcm5penIuanMiLCI7KGZ1bmN0aW9uKHdpbmRvdyl7XG4vKiEgbW9kZXJuaXpyIDMuNS4wIChDdXN0b20gQnVpbGQpIHwgTUlUICpcbiAqIGh0dHBzOi8vbW9kZXJuaXpyLmNvbS9kb3dubG9hZC8/LWNoZWNrZWQtY3NzdHJhbnNmb3JtczNkLWRhdGFzZXQtZGV0YWlscy1mZXRjaC1qc29uLXN2Zy10YXJnZXQtYWRkdGVzdC1zZXRjbGFzc2VzICEqL1xuIWZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUsdCl7cmV0dXJuIHR5cGVvZiBlPT09dH1mdW5jdGlvbiBpKCl7dmFyIGUsdCxuLGksbyxzLGE7Zm9yKHZhciBsIGluIHcpaWYody5oYXNPd25Qcm9wZXJ0eShsKSl7aWYoZT1bXSx0PXdbbF0sdC5uYW1lJiYoZS5wdXNoKHQubmFtZS50b0xvd2VyQ2FzZSgpKSx0Lm9wdGlvbnMmJnQub3B0aW9ucy5hbGlhc2VzJiZ0Lm9wdGlvbnMuYWxpYXNlcy5sZW5ndGgpKWZvcihuPTA7bjx0Lm9wdGlvbnMuYWxpYXNlcy5sZW5ndGg7bisrKWUucHVzaCh0Lm9wdGlvbnMuYWxpYXNlc1tuXS50b0xvd2VyQ2FzZSgpKTtmb3IoaT1yKHQuZm4sXCJmdW5jdGlvblwiKT90LmZuKCk6dC5mbixvPTA7bzxlLmxlbmd0aDtvKyspcz1lW29dLGE9cy5zcGxpdChcIi5cIiksMT09PWEubGVuZ3RoP01vZGVybml6clthWzBdXT1pOighTW9kZXJuaXpyW2FbMF1dfHxNb2Rlcm5penJbYVswXV1pbnN0YW5jZW9mIEJvb2xlYW58fChNb2Rlcm5penJbYVswXV09bmV3IEJvb2xlYW4oTW9kZXJuaXpyW2FbMF1dKSksTW9kZXJuaXpyW2FbMF1dW2FbMV1dPWkpLGIucHVzaCgoaT9cIlwiOlwibm8tXCIpK2Euam9pbihcIi1cIikpfX1mdW5jdGlvbiBvKGUpe3ZhciB0PXguY2xhc3NOYW1lLG49TW9kZXJuaXpyLl9jb25maWcuY2xhc3NQcmVmaXh8fFwiXCI7aWYoVCYmKHQ9dC5iYXNlVmFsKSxNb2Rlcm5penIuX2NvbmZpZy5lbmFibGVKU0NsYXNzKXt2YXIgcj1uZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrbitcIm5vLWpzKFxcXFxzfCQpXCIpO3Q9dC5yZXBsYWNlKHIsXCIkMVwiK24rXCJqcyQyXCIpfU1vZGVybml6ci5fY29uZmlnLmVuYWJsZUNsYXNzZXMmJih0Kz1cIiBcIituK2Uuam9pbihcIiBcIituKSxUP3guY2xhc3NOYW1lLmJhc2VWYWw9dDp4LmNsYXNzTmFtZT10KX1mdW5jdGlvbiBzKGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpZm9yKHZhciBuIGluIGUpXyhlLG4pJiZzKG4sZVtuXSk7ZWxzZXtlPWUudG9Mb3dlckNhc2UoKTt2YXIgcj1lLnNwbGl0KFwiLlwiKSxpPU1vZGVybml6cltyWzBdXTtpZigyPT1yLmxlbmd0aCYmKGk9aVtyWzFdXSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGkpcmV0dXJuIE1vZGVybml6cjt0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dCgpOnQsMT09ci5sZW5ndGg/TW9kZXJuaXpyW3JbMF1dPXQ6KCFNb2Rlcm5penJbclswXV18fE1vZGVybml6cltyWzBdXWluc3RhbmNlb2YgQm9vbGVhbnx8KE1vZGVybml6cltyWzBdXT1uZXcgQm9vbGVhbihNb2Rlcm5penJbclswXV0pKSxNb2Rlcm5penJbclswXV1bclsxXV09dCksbyhbKHQmJjAhPXQ/XCJcIjpcIm5vLVwiKStyLmpvaW4oXCItXCIpXSksTW9kZXJuaXpyLl90cmlnZ2VyKGUsdCl9cmV0dXJuIE1vZGVybml6cn1mdW5jdGlvbiBhKCl7cmV0dXJuXCJmdW5jdGlvblwiIT10eXBlb2YgdC5jcmVhdGVFbGVtZW50P3QuY3JlYXRlRWxlbWVudChhcmd1bWVudHNbMF0pOlQ/dC5jcmVhdGVFbGVtZW50TlMuY2FsbCh0LFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixhcmd1bWVudHNbMF0pOnQuY3JlYXRlRWxlbWVudC5hcHBseSh0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gbCgpe3ZhciBlPXQuYm9keTtyZXR1cm4gZXx8KGU9YShUP1wic3ZnXCI6XCJib2R5XCIpLGUuZmFrZT0hMCksZX1mdW5jdGlvbiB1KGUsbixyLGkpe3ZhciBvLHMsdSxmLGQ9XCJtb2Rlcm5penJcIixjPWEoXCJkaXZcIikscD1sKCk7aWYocGFyc2VJbnQociwxMCkpZm9yKDtyLS07KXU9YShcImRpdlwiKSx1LmlkPWk/aVtyXTpkKyhyKzEpLGMuYXBwZW5kQ2hpbGQodSk7cmV0dXJuIG89YShcInN0eWxlXCIpLG8udHlwZT1cInRleHQvY3NzXCIsby5pZD1cInNcIitkLChwLmZha2U/cDpjKS5hcHBlbmRDaGlsZChvKSxwLmFwcGVuZENoaWxkKGMpLG8uc3R5bGVTaGVldD9vLnN0eWxlU2hlZXQuY3NzVGV4dD1lOm8uYXBwZW5kQ2hpbGQodC5jcmVhdGVUZXh0Tm9kZShlKSksYy5pZD1kLHAuZmFrZSYmKHAuc3R5bGUuYmFja2dyb3VuZD1cIlwiLHAuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixmPXguc3R5bGUub3ZlcmZsb3cseC5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiLHguYXBwZW5kQ2hpbGQocCkpLHM9bihjLGUpLHAuZmFrZT8ocC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHApLHguc3R5bGUub3ZlcmZsb3c9Zix4Lm9mZnNldEhlaWdodCk6Yy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpLCEhc31mdW5jdGlvbiBmKGUsdCl7cmV0dXJuISF+KFwiXCIrZSkuaW5kZXhPZih0KX1mdW5jdGlvbiBkKGUpe3JldHVybiBlLnJlcGxhY2UoLyhbQS1aXSkvZyxmdW5jdGlvbihlLHQpe3JldHVyblwiLVwiK3QudG9Mb3dlckNhc2UoKX0pLnJlcGxhY2UoL15tcy0vLFwiLW1zLVwiKX1mdW5jdGlvbiBjKHQsbixyKXt2YXIgaTtpZihcImdldENvbXB1dGVkU3R5bGVcImluIGUpe2k9Z2V0Q29tcHV0ZWRTdHlsZS5jYWxsKGUsdCxuKTt2YXIgbz1lLmNvbnNvbGU7aWYobnVsbCE9PWkpciYmKGk9aS5nZXRQcm9wZXJ0eVZhbHVlKHIpKTtlbHNlIGlmKG8pe3ZhciBzPW8uZXJyb3I/XCJlcnJvclwiOlwibG9nXCI7b1tzXS5jYWxsKG8sXCJnZXRDb21wdXRlZFN0eWxlIHJldHVybmluZyBudWxsLCBpdHMgcG9zc2libGUgbW9kZXJuaXpyIHRlc3QgcmVzdWx0cyBhcmUgaW5hY2N1cmF0ZVwiKX19ZWxzZSBpPSFuJiZ0LmN1cnJlbnRTdHlsZSYmdC5jdXJyZW50U3R5bGVbcl07cmV0dXJuIGl9ZnVuY3Rpb24gcCh0LHIpe3ZhciBpPXQubGVuZ3RoO2lmKFwiQ1NTXCJpbiBlJiZcInN1cHBvcnRzXCJpbiBlLkNTUyl7Zm9yKDtpLS07KWlmKGUuQ1NTLnN1cHBvcnRzKGQodFtpXSkscikpcmV0dXJuITA7cmV0dXJuITF9aWYoXCJDU1NTdXBwb3J0c1J1bGVcImluIGUpe2Zvcih2YXIgbz1bXTtpLS07KW8ucHVzaChcIihcIitkKHRbaV0pK1wiOlwiK3IrXCIpXCIpO3JldHVybiBvPW8uam9pbihcIiBvciBcIiksdShcIkBzdXBwb3J0cyAoXCIrbytcIikgeyAjbW9kZXJuaXpyIHsgcG9zaXRpb246IGFic29sdXRlOyB9IH1cIixmdW5jdGlvbihlKXtyZXR1cm5cImFic29sdXRlXCI9PWMoZSxudWxsLFwicG9zaXRpb25cIil9KX1yZXR1cm4gbn1mdW5jdGlvbiBoKGUpe3JldHVybiBlLnJlcGxhY2UoLyhbYS16XSktKFthLXpdKS9nLGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdCtuLnRvVXBwZXJDYXNlKCl9KS5yZXBsYWNlKC9eLS8sXCJcIil9ZnVuY3Rpb24gbShlLHQsaSxvKXtmdW5jdGlvbiBzKCl7dSYmKGRlbGV0ZSBFLnN0eWxlLGRlbGV0ZSBFLm1vZEVsZW0pfWlmKG89cihvLFwidW5kZWZpbmVkXCIpPyExOm8sIXIoaSxcInVuZGVmaW5lZFwiKSl7dmFyIGw9cChlLGkpO2lmKCFyKGwsXCJ1bmRlZmluZWRcIikpcmV0dXJuIGx9Zm9yKHZhciB1LGQsYyxtLGcsdj1bXCJtb2Rlcm5penJcIixcInRzcGFuXCIsXCJzYW1wXCJdOyFFLnN0eWxlJiZ2Lmxlbmd0aDspdT0hMCxFLm1vZEVsZW09YSh2LnNoaWZ0KCkpLEUuc3R5bGU9RS5tb2RFbGVtLnN0eWxlO2ZvcihjPWUubGVuZ3RoLGQ9MDtjPmQ7ZCsrKWlmKG09ZVtkXSxnPUUuc3R5bGVbbV0sZihtLFwiLVwiKSYmKG09aChtKSksRS5zdHlsZVttXSE9PW4pe2lmKG98fHIoaSxcInVuZGVmaW5lZFwiKSlyZXR1cm4gcygpLFwicGZ4XCI9PXQ/bTohMDt0cnl7RS5zdHlsZVttXT1pfWNhdGNoKHkpe31pZihFLnN0eWxlW21dIT1nKXJldHVybiBzKCksXCJwZnhcIj09dD9tOiEwfXJldHVybiBzKCksITF9ZnVuY3Rpb24gZyhlLHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19ZnVuY3Rpb24gdihlLHQsbil7dmFyIGk7Zm9yKHZhciBvIGluIGUpaWYoZVtvXWluIHQpcmV0dXJuIG49PT0hMT9lW29dOihpPXRbZVtvXV0scihpLFwiZnVuY3Rpb25cIik/ZyhpLG58fHQpOmkpO3JldHVybiExfWZ1bmN0aW9uIHkoZSx0LG4saSxvKXt2YXIgcz1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSksYT0oZStcIiBcIitQLmpvaW4ocytcIiBcIikrcykuc3BsaXQoXCIgXCIpO3JldHVybiByKHQsXCJzdHJpbmdcIil8fHIodCxcInVuZGVmaW5lZFwiKT9tKGEsdCxpLG8pOihhPShlK1wiIFwiK0Euam9pbihzK1wiIFwiKStzKS5zcGxpdChcIiBcIiksdihhLHQsbikpfWZ1bmN0aW9uIFMoZSx0LHIpe3JldHVybiB5KGUsbixuLHQscil9dmFyIHc9W10sQz17X3ZlcnNpb246XCIzLjUuMFwiLF9jb25maWc6e2NsYXNzUHJlZml4OlwiXCIsZW5hYmxlQ2xhc3NlczohMCxlbmFibGVKU0NsYXNzOiEwLHVzZVByZWZpeGVzOiEwfSxfcTpbXSxvbjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe3QobltlXSl9LDApfSxhZGRUZXN0OmZ1bmN0aW9uKGUsdCxuKXt3LnB1c2goe25hbWU6ZSxmbjp0LG9wdGlvbnM6bn0pfSxhZGRBc3luY1Rlc3Q6ZnVuY3Rpb24oZSl7dy5wdXNoKHtuYW1lOm51bGwsZm46ZX0pfX0sTW9kZXJuaXpyPWZ1bmN0aW9uKCl7fTtNb2Rlcm5penIucHJvdG90eXBlPUMsTW9kZXJuaXpyPW5ldyBNb2Rlcm5penI7dmFyIF8sYj1bXSx4PXQuZG9jdW1lbnRFbGVtZW50LFQ9XCJzdmdcIj09PXgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTshZnVuY3Rpb24oKXt2YXIgZT17fS5oYXNPd25Qcm9wZXJ0eTtfPXIoZSxcInVuZGVmaW5lZFwiKXx8cihlLmNhbGwsXCJ1bmRlZmluZWRcIik/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCBpbiBlJiZyKGUuY29uc3RydWN0b3IucHJvdG90eXBlW3RdLFwidW5kZWZpbmVkXCIpfTpmdW5jdGlvbih0LG4pe3JldHVybiBlLmNhbGwodCxuKX19KCksQy5fbD17fSxDLm9uPWZ1bmN0aW9uKGUsdCl7dGhpcy5fbFtlXXx8KHRoaXMuX2xbZV09W10pLHRoaXMuX2xbZV0ucHVzaCh0KSxNb2Rlcm5penIuaGFzT3duUHJvcGVydHkoZSkmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtNb2Rlcm5penIuX3RyaWdnZXIoZSxNb2Rlcm5penJbZV0pfSwwKX0sQy5fdHJpZ2dlcj1mdW5jdGlvbihlLHQpe2lmKHRoaXMuX2xbZV0pe3ZhciBuPXRoaXMuX2xbZV07c2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBlLHI7Zm9yKGU9MDtlPG4ubGVuZ3RoO2UrKykocj1uW2VdKSh0KX0sMCksZGVsZXRlIHRoaXMuX2xbZV19fSxNb2Rlcm5penIuX3EucHVzaChmdW5jdGlvbigpe0MuYWRkVGVzdD1zfSksTW9kZXJuaXpyLmFkZFRlc3QoXCJqc29uXCIsXCJKU09OXCJpbiBlJiZcInBhcnNlXCJpbiBKU09OJiZcInN0cmluZ2lmeVwiaW4gSlNPTiksTW9kZXJuaXpyLmFkZFRlc3QoXCJzdmdcIiwhIXQuY3JlYXRlRWxlbWVudE5TJiYhIXQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInN2Z1wiKS5jcmVhdGVTVkdSZWN0KTt2YXIgej1DLnRlc3RTdHlsZXM9dTtNb2Rlcm5penIuYWRkVGVzdChcImNoZWNrZWRcIixmdW5jdGlvbigpe3JldHVybiB6KFwiI21vZGVybml6ciB7cG9zaXRpb246YWJzb2x1dGV9ICNtb2Rlcm5penIgaW5wdXQge21hcmdpbi1sZWZ0OjEwcHh9ICNtb2Rlcm5penIgOmNoZWNrZWQge21hcmdpbi1sZWZ0OjIwcHg7ZGlzcGxheTpibG9ja31cIixmdW5jdGlvbihlKXt2YXIgdD1hKFwiaW5wdXRcIik7cmV0dXJuIHQuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiY2hlY2tib3hcIiksdC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLGUuYXBwZW5kQ2hpbGQodCksMjA9PT10Lm9mZnNldExlZnR9KX0pLE1vZGVybml6ci5hZGRUZXN0KFwidGFyZ2V0XCIsZnVuY3Rpb24oKXt2YXIgdD1lLmRvY3VtZW50O2lmKCEoXCJxdWVyeVNlbGVjdG9yQWxsXCJpbiB0KSlyZXR1cm4hMTt0cnl7cmV0dXJuIHQucXVlcnlTZWxlY3RvckFsbChcIjp0YXJnZXRcIiksITB9Y2F0Y2gobil7cmV0dXJuITF9fSksTW9kZXJuaXpyLmFkZFRlc3QoXCJkYXRhc2V0XCIsZnVuY3Rpb24oKXt2YXIgZT1hKFwiZGl2XCIpO3JldHVybiBlLnNldEF0dHJpYnV0ZShcImRhdGEtYS1iXCIsXCJjXCIpLCEoIWUuZGF0YXNldHx8XCJjXCIhPT1lLmRhdGFzZXQuYUIpfSksTW9kZXJuaXpyLmFkZFRlc3QoXCJkZXRhaWxzXCIsZnVuY3Rpb24oKXt2YXIgZSx0PWEoXCJkZXRhaWxzXCIpO3JldHVyblwib3BlblwiaW4gdD8oeihcIiNtb2Rlcm5penIgZGV0YWlsc3tkaXNwbGF5OmJsb2NrfVwiLGZ1bmN0aW9uKG4pe24uYXBwZW5kQ2hpbGQodCksdC5pbm5lckhUTUw9XCI8c3VtbWFyeT5hPC9zdW1tYXJ5PmJcIixlPXQub2Zmc2V0SGVpZ2h0LHQub3Blbj0hMCxlPWUhPXQub2Zmc2V0SGVpZ2h0fSksZSk6ITF9KSxNb2Rlcm5penIuYWRkVGVzdChcImZldGNoXCIsXCJmZXRjaFwiaW4gZSk7dmFyIGs9XCJNb3ogTyBtcyBXZWJraXRcIixQPUMuX2NvbmZpZy51c2VQcmVmaXhlcz9rLnNwbGl0KFwiIFwiKTpbXTtDLl9jc3NvbVByZWZpeGVzPVA7dmFyIE49e2VsZW06YShcIm1vZGVybml6clwiKX07TW9kZXJuaXpyLl9xLnB1c2goZnVuY3Rpb24oKXtkZWxldGUgTi5lbGVtfSk7dmFyIEU9e3N0eWxlOk4uZWxlbS5zdHlsZX07TW9kZXJuaXpyLl9xLnVuc2hpZnQoZnVuY3Rpb24oKXtkZWxldGUgRS5zdHlsZX0pO3ZhciBBPUMuX2NvbmZpZy51c2VQcmVmaXhlcz9rLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIgXCIpOltdO0MuX2RvbVByZWZpeGVzPUEsQy50ZXN0QWxsUHJvcHM9eSxDLnRlc3RBbGxQcm9wcz1TO3ZhciBqPVwiQ1NTXCJpbiBlJiZcInN1cHBvcnRzXCJpbiBlLkNTUyxPPVwic3VwcG9ydHNDU1NcImluIGU7TW9kZXJuaXpyLmFkZFRlc3QoXCJzdXBwb3J0c1wiLGp8fE8pLE1vZGVybml6ci5hZGRUZXN0KFwiY3NzdHJhbnNmb3JtczNkXCIsZnVuY3Rpb24oKXt2YXIgZT0hIVMoXCJwZXJzcGVjdGl2ZVwiLFwiMXB4XCIsITApLHQ9TW9kZXJuaXpyLl9jb25maWcudXNlUHJlZml4ZXM7aWYoZSYmKCF0fHxcIndlYmtpdFBlcnNwZWN0aXZlXCJpbiB4LnN0eWxlKSl7dmFyIG4scj1cIiNtb2Rlcm5penJ7d2lkdGg6MDtoZWlnaHQ6MH1cIjtNb2Rlcm5penIuc3VwcG9ydHM/bj1cIkBzdXBwb3J0cyAocGVyc3BlY3RpdmU6IDFweClcIjoobj1cIkBtZWRpYSAodHJhbnNmb3JtLTNkKVwiLHQmJihuKz1cIiwoLXdlYmtpdC10cmFuc2Zvcm0tM2QpXCIpKSxuKz1cInsjbW9kZXJuaXpye3dpZHRoOjdweDtoZWlnaHQ6MThweDttYXJnaW46MDtwYWRkaW5nOjA7Ym9yZGVyOjB9fVwiLHoocituLGZ1bmN0aW9uKHQpe2U9Nz09PXQub2Zmc2V0V2lkdGgmJjE4PT09dC5vZmZzZXRIZWlnaHR9KX1yZXR1cm4gZX0pLGkoKSxvKGIpLGRlbGV0ZSBDLmFkZFRlc3QsZGVsZXRlIEMuYWRkQXN5bmNUZXN0O2Zvcih2YXIgcT0wO3E8TW9kZXJuaXpyLl9xLmxlbmd0aDtxKyspTW9kZXJuaXpyLl9xW3FdKCk7ZS5Nb2Rlcm5penI9TW9kZXJuaXpyfSh3aW5kb3csZG9jdW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuTW9kZXJuaXpyO1xufSkod2luZG93KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLy5tb2Rlcm5penItYXV0b3JjXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=